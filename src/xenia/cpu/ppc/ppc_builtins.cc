#include "xenia/cpu/module.h"
#include "xenia/cpu/xex_module.h"
#include "ppc_builtins.h"

#include <array>


using namespace xe::cpu::ppc;

#include <string.h>

#include "ppc_instr.h"
enum class seqop_e {
  match_bytes,
  match_bltarget,
  match_btarget,
  match_recursion,
  compare_op_masked_push_nand,  // mask op word with provided mask, then push
                                // (opword & ~mask) onto the op stack
                                // used to compare operations that are
                                // assembling offsets into rdata

};
using xe::cpu::XexModule;
struct fnmatch_state_t {
  unsigned char* module_base;
  unsigned char* memory_base;
  xe::cpu::XexModule* xexmod;
  fnmatch_state_t(unsigned char* modbase, unsigned char* membase,
                  xe::cpu::XexModule* xexm)
      : module_base(modbase),
        memory_base(membase),
        xexmod(xexm),
        current_assembled_address(0),
        mask_stack_pos(0) {}

  // for simpler address generation sequences
  unsigned current_assembled_address;

  unsigned mask_stack_pos;

  unsigned mask_stack[64];

  unsigned current_word() const { return *(const unsigned*)module_base; }

  unsigned push_low16(unsigned v) {
    mask_stack[mask_stack_pos] = (uint16_t)v;
    return mask_stack_pos++;
  }

  unsigned push32(unsigned v) {
    mask_stack[mask_stack_pos] = v;
    return mask_stack_pos++;
  }

  unsigned takestack(unsigned displ) {
    return mask_stack[mask_stack_pos - displ];
  }

  void setaddrlow(unsigned v) {
    current_assembled_address = (current_assembled_address & 0xffff0000) | v;
  }
  void setaddrhigh(unsigned v) {
    current_assembled_address =
        (current_assembled_address & 0xffff) | (v << 16);
  }
};

InstrData take_as_instrdata(uint32_t w) {
  InstrData r{PPCOpcode::addcx, nullptr, 0, 0};
  r.code = w;
  return r;
}

#define instr_format(value, fmt) (take_as_instrdata(value)).fmt

unsigned get_lis_value(uint32_t w) { return (w & 0xffff) << 16; }

/*
def extract_li(v):
    v &= ~(0b11)
    v <<= 6
    v &= 0xFFFFFFFF
    v >>= 6
    if (v & 0x800000) != 0:
        v |= 0xFF000000
    return v
*/
constexpr int64_t XEEXTS26(uint32_t v) {
  return (int64_t)(v & 0x02000000 ? (int32_t)v | 0xFC000000 : (int32_t)(v));
}
static unsigned char* decode_branch_li_form(fnmatch_state_t* state,
                                            unsigned wrd) {
  /* unsigned op = (state->current_word());

   unsigned displ = op & ~(0b11);
   displ <<= 6;
   displ >>= 6;
   if ((displ & 0x800000) != 0) {
     displ |= 0xFF000000;
   }

   if ((op & 2)) {
      // displ +=
   state->xexmod->memory()->HostToGuestVirtual((void*)state->module_base);
     //  return state->xexmod->memory()->TranslateVirtual(displ);
     return displ + state->module_base;
   } else
       //return state->xexmod->memory()->TranslateVirtual(displ);

     return displ + state->memory_base;*/
  /*

uint32_t nia;
if (i.I.AA) {
  nia = (uint32_t)XEEXTS26(i.I.LI << 2);
} else {
  nia = (uint32_t)(i.address + XEEXTS26(i.I.LI << 2));
}

  */

  int displ = XEEXTS26(instr_format(wrd, I).LI << 2);

  if (instr_format(wrd, I).AA) {
    return state->xexmod->memory()->TranslateVirtual(displ);
  } else {
    unsigned yo =
        state->xexmod->memory()->HostToGuestVirtual(state->module_base);
    return state->xexmod->memory()->TranslateVirtual(yo + displ);
  }
}

static bool is_branch(unsigned w) { return (w >> (32 - 6)) == 18; }
static bool is_bl(unsigned w) { return is_branch(w) && instr_format(w, I).LK; }

static bool is_b(unsigned w) { return is_branch(w) && !instr_format(w, I).LK; }
template <typename blseq>
struct blmatch {
  static constexpr seqop_e op = seqop_e::match_bltarget;

  static bool match(fnmatch_state_t* state) {
    auto wrd = _byteswap_ulong(state->current_word());
    if (!is_bl(wrd)) return false;
    auto offs = decode_branch_li_form(state, wrd);

    fnmatch_state_t innermatch{offs, state->memory_base, state->xexmod};
    state->module_base += 4;

    if (blseq::match(&innermatch)) {
      // __debugbreak();
      return true;
    }
    return false;
  }
};

template <typename bseq>
struct bmatch {
  static constexpr seqop_e op = seqop_e::match_btarget;
  static bool match(fnmatch_state_t* state) {
    auto wrd = _byteswap_ulong(state->current_word());
    if (!is_b(wrd)) return false;
    auto offs = decode_branch_li_form(state, wrd);

    fnmatch_state_t innermatch{offs, state->memory_base, state->xexmod};

    state->module_base += 4;

    if (bseq::match(&innermatch)) {
      // __debugbreak();
      return true;
    }
    return false;
  }
};
/*
    compare (word & maskval) == cmpval, sethighaddr to low 16 of word
*/
template <unsigned cmpval, unsigned maskval>
struct masked_compare_sethigh {
  static bool match(fnmatch_state_t* state) {
    unsigned vat =
        _byteswap_ulong(reinterpret_cast<uint32_t*>(state->module_base)[0]);
    bool result = (vat & maskval) == cmpval;

    if (result) {
      state->module_base += 4;
      state->setaddrhigh(vat & 0xffff);
    }
    return result;
  }
};

template <unsigned cmpval, unsigned maskval = 0xffff0000>
struct masked_compare_push {
  static bool match(fnmatch_state_t* state) {
    unsigned vat =
        _byteswap_ulong(reinterpret_cast<uint32_t*>(state->module_base)[0]);
    bool result = (vat & maskval) == cmpval;

    if (result) {
      state->module_base += 4;
      state->push_low16(vat);
    }
    return result;
  }
};
/*
    compare (word & maskval) == cmpval, setaddrlow to low 16 of word
*/
template <unsigned cmpval, unsigned maskval>
struct masked_compare_setlow {
  static bool match(fnmatch_state_t* state) {
    unsigned vat =
        _byteswap_ulong(reinterpret_cast<uint32_t*>(state->module_base)[0]);
    bool result = (vat & maskval) == cmpval;

    if (result) {
      state->module_base += 4;
      state->setaddrlow(vat & 0xffff);
    }
    return result;
  }
};
/*      do not use this unless you're absolutely sure you know that the rest of
 * the code in the matcher is unique enough that this wont cause false
 * positives*/
template <unsigned n>
struct skipbytes {
  static bool match(fnmatch_state_t* state) {
    state->module_base += n;
    return true;
  }
};

template <unsigned position_highpart, unsigned position_sshort_displacement,
          unsigned char... bvals>
struct lis_sdisp16_addr_memcmp {
  static constexpr unsigned char data[] = {bvals...};
  static bool match(fnmatch_state_t* state) {
    unsigned hpart = state->takestack(position_highpart);
    hpart <<= 16;

    signed displacement =
        (signed short)state->takestack(position_sshort_displacement);
    hpart += displacement;

    void* hptr = state->xexmod->memory()->TranslateVirtual(hpart);

    bool result = !memcmp(hptr, (const void*)&data[0], sizeof...(bvals));
    return result;
  }
};

template <unsigned position_base, unsigned position_sshort_displacement,
          unsigned char... bvals>
struct lis_sdisp16_to_32addr_memcmp {
  static constexpr unsigned char data[] = {bvals...};
  static bool match(fnmatch_state_t* state) {
    unsigned hpart = state->takestack(position_base);
    signed displacement =
        (signed short)state->takestack(position_sshort_displacement);
    hpart += displacement;

    void* hptr = state->xexmod->memory()->TranslateVirtual(hpart);

    bool result = !memcmp(hptr, (const void*)&data[0], sizeof...(bvals));

    return result;
  }
};

template <unsigned position_highpart, unsigned position_sshort_displacement>
struct lis_sdisp16_addr_push {
  static bool match(fnmatch_state_t* state) {
    unsigned hpart = state->takestack(position_highpart);
    hpart <<= 16;

    signed displacement =
        (signed short)state->takestack(position_sshort_displacement);
    hpart += displacement;
    state->push32(hpart);
    return true;
  }
};

template <unsigned char... bvals>
struct scanbytes {
  static constexpr unsigned char data[] = {bvals...};

  static constexpr seqop_e op = seqop_e::match_bytes;
  static bool match(fnmatch_state_t* state) {
    bool result = !memcmp((const void*)state->module_base,
                          (const void*)&data[0], sizeof...(bvals));

    if (result) {
      state->module_base += sizeof...(bvals);
    }
    return result;
  }
};
template <typename T, typename... Ts>
static bool exec_matchers(fnmatch_state_t* state) {
  if (!T::match(state)) {
    return false;
  }

  if constexpr (sizeof...(Ts)) {
    return exec_matchers<Ts...>(state);
  } else {
    return true;
  }
}
template <PPCBuiltin bcode, typename... Ts>
struct ppcbuiltin_matcher_t {
  // for easier matcher delegation in bmatch/blmatch
  static bool match(fnmatch_state_t* state) {
    return exec_matchers<Ts...>(state);
  }

  static bool run(unsigned char* mem_base, unsigned char* start,
                  PPCBuiltin* out_bltin, XexModule* rm) {
    fnmatch_state_t state{start, mem_base, rm};
    if (exec_matchers<Ts...>(&state)) {
      *out_bltin = bcode;
      return true;
    }
    return false;
  }
};

template <typename... matchers>
struct builtin_selector_t {
  template <typename T, typename... Ts>
  static bool select_impl(uint8_t* fn, uint8_t* module_base,
                          PPCBuiltin* out_bltin, XexModule* rm) {
    if (T::run(module_base, fn, out_bltin, rm)) {
      return true;
    }

    if constexpr (sizeof...(Ts)) {
      return select_impl<Ts...>(fn, module_base, out_bltin, rm);
    } else {
      return false;
    }
  }

  static PPCBuiltin select(uint8_t* fn, uint8_t* module_base, XexModule* rm) {
    PPCBuiltin result = PPCBuiltin::None;
    select_impl<matchers...>(fn, module_base, &result, rm);
    return result;
  }
};

/*
    double checked these too
*/

using match_savegplr = ppcbuiltin_matcher_t<
    PPCBuiltin::savegplr,
    scanbytes<0xf9, 0xc1, 0xff, 0x68, 0xf9, 0xe1, 0xff, 0x70, 0xfa, 0x1, 0xff,
              0x78, 0xfa, 0x21, 0xff, 0x80, 0xfa, 0x41, 0xff, 0x88, 0xfa, 0x61,
              0xff, 0x90, 0xfa, 0x81, 0xff, 0x98, 0xfa, 0xa1, 0xff, 0xa0, 0xfa,
              0xc1, 0xff, 0xa8, 0xfa, 0xe1, 0xff, 0xb0, 0xfb, 0x1, 0xff, 0xb8,
              0xfb, 0x21, 0xff, 0xc0, 0xfb, 0x41, 0xff, 0xc8, 0xfb, 0x61, 0xff,
              0xd0, 0xfb, 0x81, 0xff, 0xd8, 0xfb, 0xa1, 0xff, 0xe0, 0xfb, 0xc1,
              0xff, 0xe8, 0xfb, 0xe1, 0xff, 0xf0, 0x91, 0x81, 0xff, 0xf8, 0x4e,
              0x80, 0x0, 0x20>>;
using match_savegplr15 = ppcbuiltin_matcher_t<
    PPCBuiltin::savegplr15,
    scanbytes<0xf9, 0xe1, 0xff, 0x70, 0xfa, 0x1, 0xff, 0x78, 0xfa, 0x21, 0xff,
              0x80, 0xfa, 0x41, 0xff, 0x88, 0xfa, 0x61, 0xff, 0x90, 0xfa, 0x81,
              0xff, 0x98, 0xfa, 0xa1, 0xff, 0xa0, 0xfa, 0xc1, 0xff, 0xa8, 0xfa,
              0xe1, 0xff, 0xb0, 0xfb, 0x1, 0xff, 0xb8, 0xfb, 0x21, 0xff, 0xc0,
              0xfb, 0x41, 0xff, 0xc8, 0xfb, 0x61, 0xff, 0xd0, 0xfb, 0x81, 0xff,
              0xd8, 0xfb, 0xa1, 0xff, 0xe0, 0xfb, 0xc1, 0xff, 0xe8, 0xfb, 0xe1,
              0xff, 0xf0, 0x91, 0x81, 0xff, 0xf8, 0x4e, 0x80, 0x0, 0x20>>;
using match_savegplr16 =

    ppcbuiltin_matcher_t<
        PPCBuiltin::savegplr16,
        scanbytes<0xfa, 0x1, 0xff, 0x78, 0xfa, 0x21, 0xff, 0x80, 0xfa, 0x41,
                  0xff, 0x88, 0xfa, 0x61, 0xff, 0x90, 0xfa, 0x81, 0xff, 0x98,
                  0xfa, 0xa1, 0xff, 0xa0, 0xfa, 0xc1, 0xff, 0xa8, 0xfa, 0xe1,
                  0xff, 0xb0, 0xfb, 0x1, 0xff, 0xb8, 0xfb, 0x21, 0xff, 0xc0,
                  0xfb, 0x41, 0xff, 0xc8, 0xfb, 0x61, 0xff, 0xd0, 0xfb, 0x81,
                  0xff, 0xd8, 0xfb, 0xa1, 0xff, 0xe0, 0xfb, 0xc1, 0xff, 0xe8,
                  0xfb, 0xe1, 0xff, 0xf0, 0x91, 0x81, 0xff, 0xf8, 0x4e, 0x80,
                  0x0, 0x20>>;

using match_savegplr17 =

    ppcbuiltin_matcher_t<
        PPCBuiltin::savegplr17,
        scanbytes<0xfa, 0x21, 0xff, 0x80, 0xfa, 0x41, 0xff, 0x88, 0xfa, 0x61,
                  0xff, 0x90, 0xfa, 0x81, 0xff, 0x98, 0xfa, 0xa1, 0xff, 0xa0,
                  0xfa, 0xc1, 0xff, 0xa8, 0xfa, 0xe1, 0xff, 0xb0, 0xfb, 0x1,
                  0xff, 0xb8, 0xfb, 0x21, 0xff, 0xc0, 0xfb, 0x41, 0xff, 0xc8,
                  0xfb, 0x61, 0xff, 0xd0, 0xfb, 0x81, 0xff, 0xd8, 0xfb, 0xa1,
                  0xff, 0xe0, 0xfb, 0xc1, 0xff, 0xe8, 0xfb, 0xe1, 0xff, 0xf0,
                  0x91, 0x81, 0xff, 0xf8, 0x4e, 0x80, 0x0, 0x20>>;
using match_savegplr18 =

    ppcbuiltin_matcher_t<
        PPCBuiltin::savegplr18,
        scanbytes<0xfa, 0x41, 0xff, 0x88, 0xfa, 0x61, 0xff, 0x90, 0xfa, 0x81,
                  0xff, 0x98, 0xfa, 0xa1, 0xff, 0xa0, 0xfa, 0xc1, 0xff, 0xa8,
                  0xfa, 0xe1, 0xff, 0xb0, 0xfb, 0x1, 0xff, 0xb8, 0xfb, 0x21,
                  0xff, 0xc0, 0xfb, 0x41, 0xff, 0xc8, 0xfb, 0x61, 0xff, 0xd0,
                  0xfb, 0x81, 0xff, 0xd8, 0xfb, 0xa1, 0xff, 0xe0, 0xfb, 0xc1,
                  0xff, 0xe8, 0xfb, 0xe1, 0xff, 0xf0, 0x91, 0x81, 0xff, 0xf8,
                  0x4e, 0x80, 0x0, 0x20>>;
using match_savegplr19 =

    ppcbuiltin_matcher_t<
        PPCBuiltin::savegplr19,
        scanbytes<0xfa, 0x61, 0xff, 0x90, 0xfa, 0x81, 0xff, 0x98, 0xfa, 0xa1,
                  0xff, 0xa0, 0xfa, 0xc1, 0xff, 0xa8, 0xfa, 0xe1, 0xff, 0xb0,
                  0xfb, 0x1, 0xff, 0xb8, 0xfb, 0x21, 0xff, 0xc0, 0xfb, 0x41,
                  0xff, 0xc8, 0xfb, 0x61, 0xff, 0xd0, 0xfb, 0x81, 0xff, 0xd8,
                  0xfb, 0xa1, 0xff, 0xe0, 0xfb, 0xc1, 0xff, 0xe8, 0xfb, 0xe1,
                  0xff, 0xf0, 0x91, 0x81, 0xff, 0xf8, 0x4e, 0x80, 0x0, 0x20>>;
using match_savegplr20 =

    ppcbuiltin_matcher_t<
        PPCBuiltin::savegplr20,
        scanbytes<0xfa, 0x81, 0xff, 0x98, 0xfa, 0xa1, 0xff, 0xa0, 0xfa, 0xc1,
                  0xff, 0xa8, 0xfa, 0xe1, 0xff, 0xb0, 0xfb, 0x1, 0xff, 0xb8,
                  0xfb, 0x21, 0xff, 0xc0, 0xfb, 0x41, 0xff, 0xc8, 0xfb, 0x61,
                  0xff, 0xd0, 0xfb, 0x81, 0xff, 0xd8, 0xfb, 0xa1, 0xff, 0xe0,
                  0xfb, 0xc1, 0xff, 0xe8, 0xfb, 0xe1, 0xff, 0xf0, 0x91, 0x81,
                  0xff, 0xf8, 0x4e, 0x80, 0x0, 0x20>>;
using match_savegplr21 = ppcbuiltin_matcher_t<
    PPCBuiltin::savegplr21,
    scanbytes<0xfa, 0xa1, 0xff, 0xa0, 0xfa, 0xc1, 0xff, 0xa8, 0xfa, 0xe1, 0xff,
              0xb0, 0xfb, 0x1, 0xff, 0xb8, 0xfb, 0x21, 0xff, 0xc0, 0xfb, 0x41,
              0xff, 0xc8, 0xfb, 0x61, 0xff, 0xd0, 0xfb, 0x81, 0xff, 0xd8, 0xfb,
              0xa1, 0xff, 0xe0, 0xfb, 0xc1, 0xff, 0xe8, 0xfb, 0xe1, 0xff, 0xf0,
              0x91, 0x81, 0xff, 0xf8, 0x4e, 0x80, 0x0, 0x20>>;
using match_savegplr22 = ppcbuiltin_matcher_t<
    PPCBuiltin::savegplr22,
    scanbytes<0xfa, 0xc1, 0xff, 0xa8, 0xfa, 0xe1, 0xff, 0xb0, 0xfb, 0x1, 0xff,
              0xb8, 0xfb, 0x21, 0xff, 0xc0, 0xfb, 0x41, 0xff, 0xc8, 0xfb, 0x61,
              0xff, 0xd0, 0xfb, 0x81, 0xff, 0xd8, 0xfb, 0xa1, 0xff, 0xe0, 0xfb,
              0xc1, 0xff, 0xe8, 0xfb, 0xe1, 0xff, 0xf0, 0x91, 0x81, 0xff, 0xf8,
              0x4e, 0x80, 0x0, 0x20>>;
using match_savegplr23 = ppcbuiltin_matcher_t<
    PPCBuiltin::savegplr23,
    scanbytes<0xfa, 0xe1, 0xff, 0xb0, 0xfb, 0x1, 0xff, 0xb8, 0xfb, 0x21, 0xff,
              0xc0, 0xfb, 0x41, 0xff, 0xc8, 0xfb, 0x61, 0xff, 0xd0, 0xfb, 0x81,
              0xff, 0xd8, 0xfb, 0xa1, 0xff, 0xe0, 0xfb, 0xc1, 0xff, 0xe8, 0xfb,
              0xe1, 0xff, 0xf0, 0x91, 0x81, 0xff, 0xf8, 0x4e, 0x80, 0x0, 0x20>>;
using match_savegplr24 = ppcbuiltin_matcher_t<
    PPCBuiltin::savegplr24,
    scanbytes<0xfb, 0x1, 0xff, 0xb8, 0xfb, 0x21, 0xff, 0xc0, 0xfb, 0x41, 0xff,
              0xc8, 0xfb, 0x61, 0xff, 0xd0, 0xfb, 0x81, 0xff, 0xd8, 0xfb, 0xa1,
              0xff, 0xe0, 0xfb, 0xc1, 0xff, 0xe8, 0xfb, 0xe1, 0xff, 0xf0, 0x91,
              0x81, 0xff, 0xf8, 0x4e, 0x80, 0x0, 0x20>>;
using match_savegplr25 = ppcbuiltin_matcher_t<
    PPCBuiltin::savegplr25,
    scanbytes<0xfb, 0x21, 0xff, 0xc0, 0xfb, 0x41, 0xff, 0xc8, 0xfb, 0x61, 0xff,
              0xd0, 0xfb, 0x81, 0xff, 0xd8, 0xfb, 0xa1, 0xff, 0xe0, 0xfb, 0xc1,
              0xff, 0xe8, 0xfb, 0xe1, 0xff, 0xf0, 0x91, 0x81, 0xff, 0xf8, 0x4e,
              0x80, 0x0, 0x20>>;
using match_savegplr26 = ppcbuiltin_matcher_t<
    PPCBuiltin::savegplr26,
    scanbytes<0xfb, 0x41, 0xff, 0xc8, 0xfb, 0x61, 0xff, 0xd0, 0xfb, 0x81, 0xff,
              0xd8, 0xfb, 0xa1, 0xff, 0xe0, 0xfb, 0xc1, 0xff, 0xe8, 0xfb, 0xe1,
              0xff, 0xf0, 0x91, 0x81, 0xff, 0xf8, 0x4e, 0x80, 0x0, 0x20>>;
using match_savegplr27 = ppcbuiltin_matcher_t<
    PPCBuiltin::savegplr27,
    scanbytes<0xfb, 0x61, 0xff, 0xd0, 0xfb, 0x81, 0xff, 0xd8, 0xfb, 0xa1, 0xff,
              0xe0, 0xfb, 0xc1, 0xff, 0xe8, 0xfb, 0xe1, 0xff, 0xf0, 0x91, 0x81,
              0xff, 0xf8, 0x4e, 0x80, 0x0, 0x20>>;
using match_savegplr28 = ppcbuiltin_matcher_t<
    PPCBuiltin::savegplr28,
    scanbytes<0xfb, 0x81, 0xff, 0xd8, 0xfb, 0xa1, 0xff, 0xe0, 0xfb, 0xc1, 0xff,
              0xe8, 0xfb, 0xe1, 0xff, 0xf0, 0x91, 0x81, 0xff, 0xf8, 0x4e, 0x80,
              0x0, 0x20>>;
using match_savegplr29 = ppcbuiltin_matcher_t<
    PPCBuiltin::savegplr29,
    scanbytes<0xfb, 0xa1, 0xff, 0xe0, 0xfb, 0xc1, 0xff, 0xe8, 0xfb, 0xe1, 0xff,
              0xf0, 0x91, 0x81, 0xff, 0xf8, 0x4e, 0x80, 0x0, 0x20>>;
using match_savegplr30 = ppcbuiltin_matcher_t<
    PPCBuiltin::savegplr30,
    scanbytes<0xfb, 0xc1, 0xff, 0xe8, 0xfb, 0xe1, 0xff, 0xf0, 0x91, 0x81, 0xff,
              0xf8, 0x4e, 0x80, 0x0, 0x20>>;
using match_savegplr31 =
    ppcbuiltin_matcher_t<PPCBuiltin::savegplr31,
                         scanbytes<0xfb, 0xe1, 0xff, 0xf0, 0x91, 0x81, 0xff,
                                   0xf8, 0x4e, 0x80, 0x0, 0x20>>;

/*
    i know i double checked every restgp
*/
using match_restgplr = ppcbuiltin_matcher_t<
    PPCBuiltin::restgplr,
    scanbytes<0xe9, 0xc1, 0xff, 0x68, 0xe9, 0xe1, 0xff, 0x70, 0xea, 0x1, 0xff,
              0x78, 0xea, 0x21, 0xff, 0x80, 0xea, 0x41, 0xff, 0x88, 0xea, 0x61,
              0xff, 0x90, 0xea, 0x81, 0xff, 0x98, 0xea, 0xa1, 0xff, 0xa0, 0xea,
              0xc1, 0xff, 0xa8, 0xea, 0xe1, 0xff, 0xb0, 0xeb, 0x1, 0xff, 0xb8,
              0xeb, 0x21, 0xff, 0xc0, 0xeb, 0x41, 0xff, 0xc8, 0xeb, 0x61, 0xff,
              0xd0, 0xeb, 0x81, 0xff, 0xd8, 0xeb, 0xa1, 0xff, 0xe0, 0xeb, 0xc1,
              0xff, 0xe8, 0xeb, 0xe1, 0xff, 0xf0, 0x81, 0x81, 0xff, 0xf8, 0x7d,
              0x88, 0x3, 0xa6, 0x4e, 0x80, 0x0, 0x20>>;
using match_restgplr15 = ppcbuiltin_matcher_t<
    PPCBuiltin::restgplr15,
    scanbytes<0xe9, 0xe1, 0xff, 0x70, 0xea, 0x1, 0xff, 0x78, 0xea, 0x21, 0xff,
              0x80, 0xea, 0x41, 0xff, 0x88, 0xea, 0x61, 0xff, 0x90, 0xea, 0x81,
              0xff, 0x98, 0xea, 0xa1, 0xff, 0xa0, 0xea, 0xc1, 0xff, 0xa8, 0xea,
              0xe1, 0xff, 0xb0, 0xeb, 0x1, 0xff, 0xb8, 0xeb, 0x21, 0xff, 0xc0,
              0xeb, 0x41, 0xff, 0xc8, 0xeb, 0x61, 0xff, 0xd0, 0xeb, 0x81, 0xff,
              0xd8, 0xeb, 0xa1, 0xff, 0xe0, 0xeb, 0xc1, 0xff, 0xe8, 0xeb, 0xe1,
              0xff, 0xf0, 0x81, 0x81, 0xff, 0xf8, 0x7d, 0x88, 0x3, 0xa6, 0x4e,
              0x80, 0x0, 0x20>>;
using match_restgplr16 = ppcbuiltin_matcher_t<
    PPCBuiltin::restgplr16,
    scanbytes<0xea, 0x1, 0xff, 0x78, 0xea, 0x21, 0xff, 0x80, 0xea, 0x41, 0xff,
              0x88, 0xea, 0x61, 0xff, 0x90, 0xea, 0x81, 0xff, 0x98, 0xea, 0xa1,
              0xff, 0xa0, 0xea, 0xc1, 0xff, 0xa8, 0xea, 0xe1, 0xff, 0xb0, 0xeb,
              0x1, 0xff, 0xb8, 0xeb, 0x21, 0xff, 0xc0, 0xeb, 0x41, 0xff, 0xc8,
              0xeb, 0x61, 0xff, 0xd0, 0xeb, 0x81, 0xff, 0xd8, 0xeb, 0xa1, 0xff,
              0xe0, 0xeb, 0xc1, 0xff, 0xe8, 0xeb, 0xe1, 0xff, 0xf0, 0x81, 0x81,
              0xff, 0xf8, 0x7d, 0x88, 0x3, 0xa6, 0x4e, 0x80, 0x0, 0x20>>;
using match_restgplr17 = ppcbuiltin_matcher_t<
    PPCBuiltin::restgplr17,
    scanbytes<0xea, 0x21, 0xff, 0x80, 0xea, 0x41, 0xff, 0x88, 0xea, 0x61, 0xff,
              0x90, 0xea, 0x81, 0xff, 0x98, 0xea, 0xa1, 0xff, 0xa0, 0xea, 0xc1,
              0xff, 0xa8, 0xea, 0xe1, 0xff, 0xb0, 0xeb, 0x1, 0xff, 0xb8, 0xeb,
              0x21, 0xff, 0xc0, 0xeb, 0x41, 0xff, 0xc8, 0xeb, 0x61, 0xff, 0xd0,
              0xeb, 0x81, 0xff, 0xd8, 0xeb, 0xa1, 0xff, 0xe0, 0xeb, 0xc1, 0xff,
              0xe8, 0xeb, 0xe1, 0xff, 0xf0, 0x81, 0x81, 0xff, 0xf8, 0x7d, 0x88,
              0x3, 0xa6, 0x4e, 0x80, 0x0, 0x20>>;
using match_restgplr18 = ppcbuiltin_matcher_t<
    PPCBuiltin::restgplr18,
    scanbytes<0xea, 0x41, 0xff, 0x88, 0xea, 0x61, 0xff, 0x90, 0xea, 0x81, 0xff,
              0x98, 0xea, 0xa1, 0xff, 0xa0, 0xea, 0xc1, 0xff, 0xa8, 0xea, 0xe1,
              0xff, 0xb0, 0xeb, 0x1, 0xff, 0xb8, 0xeb, 0x21, 0xff, 0xc0, 0xeb,
              0x41, 0xff, 0xc8, 0xeb, 0x61, 0xff, 0xd0, 0xeb, 0x81, 0xff, 0xd8,
              0xeb, 0xa1, 0xff, 0xe0, 0xeb, 0xc1, 0xff, 0xe8, 0xeb, 0xe1, 0xff,
              0xf0, 0x81, 0x81, 0xff, 0xf8, 0x7d, 0x88, 0x3, 0xa6, 0x4e, 0x80,
              0x0, 0x20>>;

using match_restgplr19 = ppcbuiltin_matcher_t<
    PPCBuiltin::restgplr19,
    scanbytes<0xea, 0x61, 0xff, 0x90, 0xea, 0x81, 0xff, 0x98, 0xea, 0xa1, 0xff,
              0xa0, 0xea, 0xc1, 0xff, 0xa8, 0xea, 0xe1, 0xff, 0xb0, 0xeb, 0x1,
              0xff, 0xb8, 0xeb, 0x21, 0xff, 0xc0, 0xeb, 0x41, 0xff, 0xc8, 0xeb,
              0x61, 0xff, 0xd0, 0xeb, 0x81, 0xff, 0xd8, 0xeb, 0xa1, 0xff, 0xe0,
              0xeb, 0xc1, 0xff, 0xe8, 0xeb, 0xe1, 0xff, 0xf0, 0x81, 0x81, 0xff,
              0xf8, 0x7d, 0x88, 0x3, 0xa6, 0x4e, 0x80, 0x0, 0x20>>;
using match_restgplr20 = ppcbuiltin_matcher_t<
    PPCBuiltin::restgplr20,
    scanbytes<0xea, 0x81, 0xff, 0x98, 0xea, 0xa1, 0xff, 0xa0, 0xea, 0xc1, 0xff,
              0xa8, 0xea, 0xe1, 0xff, 0xb0, 0xeb, 0x1, 0xff, 0xb8, 0xeb, 0x21,
              0xff, 0xc0, 0xeb, 0x41, 0xff, 0xc8, 0xeb, 0x61, 0xff, 0xd0, 0xeb,
              0x81, 0xff, 0xd8, 0xeb, 0xa1, 0xff, 0xe0, 0xeb, 0xc1, 0xff, 0xe8,
              0xeb, 0xe1, 0xff, 0xf0, 0x81, 0x81, 0xff, 0xf8, 0x7d, 0x88, 0x3,
              0xa6, 0x4e, 0x80, 0x0, 0x20>>;
using match_restgplr21 = ppcbuiltin_matcher_t<
    PPCBuiltin::restgplr21,
    scanbytes<0xea, 0xa1, 0xff, 0xa0, 0xea, 0xc1, 0xff, 0xa8, 0xea, 0xe1, 0xff,
              0xb0, 0xeb, 0x1, 0xff, 0xb8, 0xeb, 0x21, 0xff, 0xc0, 0xeb, 0x41,
              0xff, 0xc8, 0xeb, 0x61, 0xff, 0xd0, 0xeb, 0x81, 0xff, 0xd8, 0xeb,
              0xa1, 0xff, 0xe0, 0xeb, 0xc1, 0xff, 0xe8, 0xeb, 0xe1, 0xff, 0xf0,
              0x81, 0x81, 0xff, 0xf8, 0x7d, 0x88, 0x3, 0xa6, 0x4e, 0x80, 0x0,
              0x20>>;
using match_restgplr22 = ppcbuiltin_matcher_t<
    PPCBuiltin::restgplr22,
    scanbytes<0xea, 0xc1, 0xff, 0xa8, 0xea, 0xe1, 0xff, 0xb0, 0xeb, 0x1, 0xff,
              0xb8, 0xeb, 0x21, 0xff, 0xc0, 0xeb, 0x41, 0xff, 0xc8, 0xeb, 0x61,
              0xff, 0xd0, 0xeb, 0x81, 0xff, 0xd8, 0xeb, 0xa1, 0xff, 0xe0, 0xeb,
              0xc1, 0xff, 0xe8, 0xeb, 0xe1, 0xff, 0xf0, 0x81, 0x81, 0xff, 0xf8,
              0x7d, 0x88, 0x3, 0xa6, 0x4e, 0x80, 0x0, 0x20>>;
using match_restgplr23 = ppcbuiltin_matcher_t<
    PPCBuiltin::restgplr23,
    scanbytes<0xea, 0xe1, 0xff, 0xb0, 0xeb, 0x1, 0xff, 0xb8, 0xeb, 0x21, 0xff,
              0xc0, 0xeb, 0x41, 0xff, 0xc8, 0xeb, 0x61, 0xff, 0xd0, 0xeb, 0x81,
              0xff, 0xd8, 0xeb, 0xa1, 0xff, 0xe0, 0xeb, 0xc1, 0xff, 0xe8, 0xeb,
              0xe1, 0xff, 0xf0, 0x81, 0x81, 0xff, 0xf8, 0x7d, 0x88, 0x3, 0xa6,
              0x4e, 0x80, 0x0, 0x20>>;
using match_restgplr24 = ppcbuiltin_matcher_t<
    PPCBuiltin::restgplr24,
    scanbytes<0xeb, 0x1, 0xff, 0xb8, 0xeb, 0x21, 0xff, 0xc0, 0xeb, 0x41, 0xff,
              0xc8, 0xeb, 0x61, 0xff, 0xd0, 0xeb, 0x81, 0xff, 0xd8, 0xeb, 0xa1,
              0xff, 0xe0, 0xeb, 0xc1, 0xff, 0xe8, 0xeb, 0xe1, 0xff, 0xf0, 0x81,
              0x81, 0xff, 0xf8, 0x7d, 0x88, 0x3, 0xa6, 0x4e, 0x80, 0x0, 0x20>>;
using match_restgplr25 = ppcbuiltin_matcher_t<
    PPCBuiltin::restgplr25,
    scanbytes<0xeb, 0x21, 0xff, 0xc0, 0xeb, 0x41, 0xff, 0xc8, 0xeb, 0x61, 0xff,
              0xd0, 0xeb, 0x81, 0xff, 0xd8, 0xeb, 0xa1, 0xff, 0xe0, 0xeb, 0xc1,
              0xff, 0xe8, 0xeb, 0xe1, 0xff, 0xf0, 0x81, 0x81, 0xff, 0xf8, 0x7d,
              0x88, 0x3, 0xa6, 0x4e, 0x80, 0x0, 0x20>>;
using match_restgplr26 = ppcbuiltin_matcher_t<
    PPCBuiltin::restgplr26,
    scanbytes<0xeb, 0x41, 0xff, 0xc8, 0xeb, 0x61, 0xff, 0xd0, 0xeb, 0x81, 0xff,
              0xd8, 0xeb, 0xa1, 0xff, 0xe0, 0xeb, 0xc1, 0xff, 0xe8, 0xeb, 0xe1,
              0xff, 0xf0, 0x81, 0x81, 0xff, 0xf8, 0x7d, 0x88, 0x3, 0xa6, 0x4e,
              0x80, 0x0, 0x20>>;
using match_restgplr27 = ppcbuiltin_matcher_t<
    PPCBuiltin::restgplr27,
    scanbytes<0xeb, 0x61, 0xff, 0xd0, 0xeb, 0x81, 0xff, 0xd8, 0xeb, 0xa1, 0xff,
              0xe0, 0xeb, 0xc1, 0xff, 0xe8, 0xeb, 0xe1, 0xff, 0xf0, 0x81, 0x81,
              0xff, 0xf8, 0x7d, 0x88, 0x3, 0xa6, 0x4e, 0x80, 0x0, 0x20>>;
using match_restgplr28 = ppcbuiltin_matcher_t<
    PPCBuiltin::restgplr28,
    scanbytes<0xeb, 0x81, 0xff, 0xd8, 0xeb, 0xa1, 0xff, 0xe0, 0xeb, 0xc1, 0xff,
              0xe8, 0xeb, 0xe1, 0xff, 0xf0, 0x81, 0x81, 0xff, 0xf8, 0x7d, 0x88,
              0x3, 0xa6, 0x4e, 0x80, 0x0, 0x20>>;
using match_restgplr29 = ppcbuiltin_matcher_t<
    PPCBuiltin::restgplr29,
    scanbytes<0xeb, 0xa1, 0xff, 0xe0, 0xeb, 0xc1, 0xff, 0xe8, 0xeb, 0xe1, 0xff,
              0xf0, 0x81, 0x81, 0xff, 0xf8, 0x7d, 0x88, 0x3, 0xa6, 0x4e, 0x80,
              0x0, 0x20>>;

using match_restgplr30 = ppcbuiltin_matcher_t<
    PPCBuiltin::restgplr30,
    scanbytes<0xeb, 0xc1, 0xff, 0xe8, 0xeb, 0xe1, 0xff, 0xf0, 0x81, 0x81, 0xff,
              0xf8, 0x7d, 0x88, 0x3, 0xa6, 0x4e, 0x80, 0x0, 0x20>>;
using match_restgplr31 = ppcbuiltin_matcher_t<
    PPCBuiltin::restgplr31,
    scanbytes<0xeb, 0xe1, 0xff, 0xf0, 0x81, 0x81, 0xff, 0xf8, 0x7d, 0x88, 0x3,
              0xa6, 0x4e, 0x80, 0x0, 0x20>>;

using match_rtl_checkstack =
    scanbytes<0x7d, 0x6c, 0x0, 0xd0, 0x38, 0xb, 0xf, 0xff, 0x7c, 0x0, 0x66,
              0x71, 0x4c, 0x81, 0x0, 0x20, 0x7c, 0x2b, 0xb, 0x78, 0x7c, 0x9,
              0x3, 0xa6, 0x84, 0xb, 0xf0, 0x0, 0x42, 0x0, 0xff, 0xfc>;

/*
.text:82A52740 FD 80 0E 5E                 fctidz    f12, f1
.text:82A52744 3D 60 82 0D                 lis       r11, -0x7DF3
.text:82A52748 FD 60 0A 10                 fabs      f11, f1
.text:82A5274C 3D 40 82 00                 lis       r10, -0x7E00
.text:82A52750 C9 AB E9 50                 lfd       f13, -0x16B0(r11)
.text:82A52754 C8 0A 18 80                 lfd       f0, 0x1880(r10)
.text:82A52758 FD 80 66 9C                 fcfid     f12, f12
.text:82A5275C FC 00 58 28                 fsub      f0, f0, f11
.text:82A52760 FD 60 58 50                 fneg      f11, f11
.text:82A52764 FD 41 60 28                 fsub      f10, f1, f12
.text:82A52768 FD AC 68 28                 fsub      f13, f12, f13
.text:82A5276C FD AA 6B 2E                 fsel      f13, f10, f12, f13
.text:82A52770 FC 00 0B 6E                 fsel      f0, f0, f13, f1
.text:82A52774 FC 2B 00 6E                 fsel      f1, f11, f1, f0
.text:82A52778 4E 80 00 20                 blr
*/
using match_floorf_variant1 = ppcbuiltin_matcher_t<
    PPCBuiltin::Floorf1, scanbytes<0xFD, 0x80, 0x0E, 0x5E>,
    masked_compare_push<0x3D600000>, scanbytes<0xFD, 0x60, 0x0A, 0x10>,
    masked_compare_push<0x3D400000>, masked_compare_push<0xC9AB0000>,
    lis_sdisp16_addr_memcmp<3, 1, 0x3f, 0xf0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0>,
    masked_compare_push<0xC80A0000>,
    lis_sdisp16_addr_memcmp<3, 1, 0x43, 0xab, 0xc1, 0x6d, 0x67, 0x4e, 0xc8,
                            0x0>,
    scanbytes<0xfd, 0x80, 0x66, 0x9c, 0xfc, 0x0, 0x58, 0x28, 0xfd, 0x60, 0x58,
              0x50, 0xfd, 0x41, 0x60, 0x28, 0xfd, 0xac, 0x68, 0x28, 0xfd, 0xaa,
              0x6b, 0x2e, 0xfc, 0x0, 0xb, 0x6e, 0xfc, 0x2b, 0x0, 0x6e, 0x4e,
              0x80, 0x0, 0x20>>;

/*
fctidz    f12, f1
lis       r11, dbl_82000E08@ha
fabs      f11, f1
lis       r10, dbl_8200A688@ha
lfd       f13, dbl_82000E08@l(r11)
lfd       f0, dbl_8200A688@l(r10)
fcfid     f12, f12
fsub      f0, f0, f11
fneg      f11, f11
fsub      f10, f12, f1
fadd      f13, f12, f13
fsel      f13, f10, f12, f13
fsel      f0, f0, f13, f1
fsel      f1, f11, f1, f0
blr
*/

using match_ceilf_variant1 = ppcbuiltin_matcher_t<
    PPCBuiltin::Ceilf1, scanbytes<0xfd, 0x80, 0xe, 0x5e>,
    masked_compare_push<0x36d0 << 16>,
    // 0x3d,0x60,0x82,0x0,
    scanbytes<0xfd, 0x60, 0xa, 0x10>, masked_compare_push<0x3d40 << 16>,
    masked_compare_push<0xc9ab << 16>,
    lis_sdisp16_addr_memcmp<3, 1, 0x3F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00,
                            0x00>,
    // 0x3d,0x40,0x82,0x1,
    masked_compare_push<0xc80a << 16>,
    lis_sdisp16_addr_memcmp<3, 1, 0x43, 0xAB, 0xC1, 0x6D, 0x67, 0x4E, 0xC8,
                            0x00>,
    scanbytes<

        0xfd, 0x80, 0x66, 0x9c, 0xfc, 0x0, 0x58, 0x28, 0xfd, 0x60, 0x58, 0x50,
        0xfd, 0x4c, 0x8, 0x28, 0xfd, 0xac, 0x68, 0x2a, 0xfd, 0xaa, 0x6b, 0x2e,
        0xfc, 0x0, 0xb, 0x6e, 0xfc, 0x2b, 0x0, 0x6e, 0x4e, 0x80, 0x0, 0x20>>;

/*

normalize a 3d vector


.text:8209B348 D1 A3 00 00                 stfs      f13, 0(r3)
.text:8209B34C ED AC 00 32                 fmuls     f13, f12, f0
.text:8209B350 D1 A3 00 04                 stfs      f13, 4(r3)
.text:8209B354 EC 0B 00 32                 fmuls     f0, f11, f0
.text:8209B358 D0 03 00 08                 stfs      f0, 8(r3)
.text:8209B35C 4E 80 00 20                 blr
.text:8209B360             loc_8209B360:
.text:8209B360 C0 2B 00 00                 lfs       f1, (flt_8202251C -
0x8202251C)(r11) .text:8209B364 4E 80 00 20                 blr
*/

using match_3d_normalize_bungie_variant1 = ppcbuiltin_matcher_t<
    PPCBuiltin::bungie_3d_normalize1,

    /*

.text:8209B308
.text:8209B308 C1 83 00 04                 lfs       f12, 4(r3)
.text:8209B30C 3D 60 82 02                 lis       r11, flt_8202251C@ha
.text:8209B310 EC 0C 03 32                 fmuls     f0, f12, f12
.text:8209B314 C1 A3 00 00                 lfs       f13, 0(r3)
.text:8209B318 C1 63 00 08                 lfs       f11, 8(r3)
    */
    scanbytes<0xc1, 0x83, 0x0, 0x4>, masked_compare_push<0x3d60 << 16>,

    // 0x3d,0x60,0x82,0x2,
    scanbytes<0xec, 0xc, 0x3, 0x32, 0xc1, 0xa3, 0x0, 0x0, 0xc1, 0x63, 0x0, 0x8>,

    /*
    .text:8209B31C 39 6B 25 1C                 addi      r11, r11,
flt_8202251C@l .text:8209B320 EC 0D 03 7A                 fmadds    f0, f13,
f13, f0 .text:8209B324 EC 0B 02 FA                 fmadds    f0, f11, f11, f0
.text:8209B328 EC 20 00 2C                 fsqrts    f1, f0
.text:8209B32C C0 0B 23 F0                 lfs       f0, (flt_8202490C -
0x8202251C)(r11) .text:8209B330 FD 40 0A 10                 fabs      f10, f1
    */
    masked_compare_push<0x396b << 16>,

    //  lis_sdisp16_addr_memcmp<2, 1, 0,0,0,0>,
    lis_sdisp16_addr_push<2, 1>,

    scanbytes<0xec, 0xd, 0x3, 0x7a, 0xec, 0xb, 0x2, 0xfa, 0xec, 0x20, 0x0,
              0x2c>,

    // 0xc0,0xb,0x23,0xf0,
    masked_compare_push<0xc00b << 16>,
    lis_sdisp16_to_32addr_memcmp<2, 1, 0x38, 0xD1, 0xB7, 0x17>,
    scanbytes<0xfd, 0x40, 0xa, 0x10, 0xff, 0xa, 0x0, 0x0, 0x41, 0x98, 0x0,
              0x28>,
    /*

.text:8209B334 FF 0A 00 00                 fcmpu     cr6, f10, f0
.text:8209B338 41 98 00 28                 blt       cr6, loc_8209B360
.text:8209B33C C0 0B FC E0                 lfs       f0, (flt_820221FC -
0x8202251C)(r11) .text:8209B340 EC 00 08 24                 fdivs     f0, f0, f1
.text:8209B344 ED AD 00 32                 fmuls     f13, f13, f0
    */
    masked_compare_push<0xc00b << 16>,
    lis_sdisp16_to_32addr_memcmp<3, 1, 0x3F, 0x80, 0, 0>,
    //  0xc0,0xb,0xfc,0xe0,
    scanbytes<0xec, 0x0, 0x8, 0x24, 0xed, 0xad, 0x0, 0x32, 0xd1, 0xa3, 0x0, 0x0,
              0xed, 0xac, 0x0, 0x32, 0xd1, 0xa3, 0x0, 0x4, 0xec, 0xb, 0x0, 0x32,
              0xd0, 0x3, 0x0, 0x8, 0x4e, 0x80, 0x0, 0x20>,
    masked_compare_push<0xc02b << 16>,
    lis_sdisp16_to_32addr_memcmp<4, 1, 0, 0, 0, 0>,
    // 0xc0,0x2b,0x0,0x0,
    scanbytes<0x4e, 0x80, 0x0, 0x20>>;

using match_memset_variant1 = ppcbuiltin_matcher_t<
    PPCBuiltin::Memset,
    scanbytes<0x38, 0x5, 0x0, 0x1, 0x7c, 0x9, 0x3, 0xa6, 0x60, 0x66, 0x0, 0x0,
              0x48, 0x0, 0x0, 0x10, 0x38, 0xa5, 0xff, 0xff, 0x98, 0x86, 0x0,
              0x0, 0x38, 0xc6, 0x0, 0x1, 0x70, 0xc0, 0x0, 0x3, 0x40, 0x2, 0xff,
              0xf0, 0x50, 0x84, 0x44, 0x2e, 0x54, 0xa0, 0xe1, 0x3f, 0x50, 0x84,
              0x80, 0x1e, 0x41, 0xe2, 0x0, 0x20, 0x7c, 0x9, 0x3, 0xa6, 0x90,
              0x86, 0x0, 0x0, 0x90, 0x86, 0x0, 0x4, 0x90, 0x86, 0x0, 0x8, 0x90,
              0x86, 0x0, 0xc, 0x38, 0xc6, 0x0, 0x10, 0x43, 0x20, 0xff, 0xec,
              0x54, 0xa0, 0xf7, 0xbf, 0x41, 0xc2, 0x0, 0x28, 0x7c, 0x9, 0x3,
              0xa6, 0x90, 0x86, 0x0, 0x0, 0x38, 0xc6, 0x0, 0x4, 0x43, 0x40, 0x0,
              0x18, 0x90, 0x86, 0x0, 0x0, 0x38, 0xc6, 0x0, 0x4, 0x43, 0x40, 0x0,
              0xc, 0x90, 0x86, 0x0, 0x0, 0x38, 0xc6, 0x0, 0x4, 0x70, 0xa0, 0x0,
              0x3, 0x7c, 0x9, 0x3, 0xa6, 0x4d, 0xe2, 0x0, 0x20, 0x98, 0x86, 0x0,
              0x0, 0x4f, 0x40, 0x0, 0x20, 0x98, 0x86, 0x0, 0x1, 0x4f, 0x40, 0x0,
              0x20, 0x98, 0x86, 0x0, 0x2, 0x4e, 0x80, 0x0, 0x20>>;

using match_bytes_data_iterator_subfunc = scanbytes<
    0x7c, 0x67, 0x1b, 0x78, 0x38, 0x60, 0xff, 0xff, 0x2f, 0x4, 0x0, 0x0, 0x4d,
    0x98, 0x0, 0x20, 0x80, 0xc7, 0x0, 0x38, 0x7f, 0x4, 0x30, 0x0, 0x4c, 0x98,
    0x0, 0x20, 0x7c, 0x8b, 0x2e, 0x70, 0x81, 0x47, 0x0, 0x48, 0x7c, 0x89, 0x2e,
    0x70, 0x55, 0x68, 0x10, 0x3a, 0x7c, 0xa9, 0x1, 0x94, 0x55, 0x6b, 0x28, 0x34,
    0x54, 0xa9, 0x28, 0x34, 0x7d, 0x48, 0x52, 0x14, 0x7d, 0x29, 0x20, 0x51,
    0x41, 0x82, 0x0, 0x40, 0x79, 0x29, 0x0, 0x20, 0x81, 0xa, 0x0, 0x0, 0x38,
    0xa0, 0x0, 0x1, 0x7c, 0xa9, 0x48, 0x30, 0x38, 0x89, 0xff, 0xff, 0x7d, 0x9,
    0x20, 0x78, 0x2b, 0x9, 0x0, 0x0, 0x41, 0x9a, 0x0, 0x48, 0x7d, 0x9, 0x0,
    0xd0, 0x7d, 0x5, 0x48, 0x38, 0x7c, 0xa4, 0x0, 0x34, 0x7d, 0x24, 0x58, 0x50,
    0x39, 0x9, 0x0, 0x1f, 0x2f, 0x8, 0xff, 0xff, 0x40, 0x9a, 0x0, 0x54, 0x7f,
    0xb, 0x30, 0x0, 0x4c, 0x98, 0x0, 0x20, 0x81, 0x2a, 0x0, 0x0, 0x2b, 0x9, 0x0,
    0x0, 0x40, 0x9a, 0x0, 0x24, 0x39, 0x6b, 0x0, 0x20, 0x39, 0x4a, 0x0, 0x4,
    0x7f, 0xb, 0x30, 0x0, 0x41, 0x98, 0xff, 0xe8, 0x4e, 0x80, 0x0, 0x20, 0x39,
    0x6b, 0x0, 0x20, 0x39, 0x4a, 0x0, 0x4, 0x4b, 0xff, 0xff, 0xd0, 0x7d, 0x49,
    0x0, 0xd0, 0x7d, 0x49, 0x48, 0x38, 0x7d, 0x28, 0x0, 0x34, 0x7d, 0x68, 0x58,
    0x50, 0x39, 0xb, 0x0, 0x1f, 0x2f, 0x8, 0xff, 0xff, 0x4d, 0x9a, 0x0, 0x20,
    0x7f, 0x8, 0x30, 0x0, 0x4c, 0x98, 0x0, 0x20, 0x81, 0x67, 0x0, 0x20, 0x81,
    0x27, 0x0, 0x44, 0x7d, 0x4b, 0x41, 0xd6, 0x7d, 0x2a, 0x4a, 0x14, 0x2f, 0xb,
    0x3, 0x80, 0x41, 0x98, 0x0, 0x8, 0x39, 0x60, 0x3, 0x80, 0x35, 0x4b, 0x0,
    0x80, 0x39, 0x60, 0x0, 0x0, 0x40, 0x81, 0x0, 0x20, 0x39, 0x4a, 0xff, 0xff,
    0x55, 0x4a, 0xc9, 0xfe, 0x39, 0x4a, 0x0, 0x1, 0x7d, 0x49, 0x3, 0xa6, 0x7c,
    0xb, 0x4a, 0x2c, 0x39, 0x6b, 0x0, 0x80, 0x42, 0x0, 0xff, 0xf8, 0x7d, 0x3,
    0x43, 0x78, 0x4e, 0x80, 0x0, 0x20>;

using match_bytes_data_iterator_subfunc_variant2 =
    scanbytes<0xfb, 0xe1, 0xff, 0xf8, 0x7c, 0x6b, 0x1b, 0x78, 0x38, 0x60, 0xff,
              0xff, 0x2f, 0x4, 0x0, 0x0, 0x41, 0x98, 0x0, 0x64, 0x80, 0xcb, 0x0,
              0x38, 0x7f, 0x4, 0x30, 0x0, 0x40, 0x98, 0x0, 0x58, 0x81, 0x4b,
              0x0, 0x24, 0x38, 0xe0, 0x0, 0x1, 0x81, 0x2b, 0x0, 0x48, 0x81, 0xb,
              0x0, 0x44, 0x7d, 0x6a, 0x21, 0xd6, 0x7c, 0xb, 0x42, 0x2c, 0x54,
              0x85, 0x6, 0xfe, 0x7c, 0x9f, 0x2e, 0x70, 0x57, 0xff, 0x10, 0x3a,
              0x7f, 0xff, 0x48, 0x2e, 0x7c, 0xe5, 0x28, 0x30, 0x7c, 0xa5, 0xf8,
              0x38, 0x2b, 0x5, 0x0, 0x0, 0x40, 0x9a, 0x0, 0x1c, 0x38, 0x84, 0x0,
              0x1, 0x7d, 0x6b, 0x52, 0x14, 0x7f, 0x4, 0x30, 0x0, 0x41, 0x98,
              0xff, 0xd0, 0xeb, 0xe1, 0xff, 0xf8, 0x4e, 0x80, 0x0, 0x20, 0x7c,
              0x83, 0x23, 0x78, 0xeb, 0xe1, 0xff, 0xf8, 0x4e, 0x80, 0x0, 0x20>;
using match_checkstack_variant1 =
    ppcbuiltin_matcher_t<PPCBuiltin::chkstk1, match_rtl_checkstack>;

using match_memcpy_variant1 = ppcbuiltin_matcher_t<
    PPCBuiltin::Memcpy_standard_variant1,
    scanbytes<
        0xf8, 0x61, 0xff, 0xf8, 0x54, 0x66, 0x7, 0x7e, 0x7c, 0x0, 0x22, 0x2c,
        0x28, 0x6, 0x0, 0x0, 0x20, 0xc6, 0x0, 0x8, 0x41, 0x82, 0x0, 0x50, 0x7c,
        0x5, 0x30, 0x40, 0x40, 0x81, 0x0, 0x64, 0x28, 0x6, 0x0, 0x4, 0x41, 0x82,
        0x0, 0x2c, 0x38, 0x63, 0xff, 0xff, 0x38, 0x84, 0xff, 0xff, 0x7c, 0xa6,
        0x28, 0x50, 0x7c, 0xc9, 0x3, 0xa6, 0x8c, 0xc4, 0x0, 0x1, 0x9c, 0xc3,
        0x0, 0x1, 0x42, 0x0, 0xff, 0xf8, 0x38, 0x63, 0x0, 0x1, 0x38, 0x84, 0x0,
        0x1, 0x48, 0x0, 0x0, 0x18, 0x7c, 0xa6, 0x28, 0x50, 0x80, 0xc4, 0x0, 0x0,
        0x38, 0x84, 0x0, 0x4, 0x90, 0xc3, 0x0, 0x0, 0x38, 0x63, 0x0, 0x4, 0x54,
        0x86, 0x7, 0x7e, 0x2b, 0x6, 0x0, 0x4, 0x28, 0x86, 0x0, 0x0, 0x2b, 0x85,
        0x0, 0x80, 0x41, 0x9a, 0x1, 0xd4, 0x40, 0x86, 0x3, 0x0, 0x40, 0x9c, 0x0,
        0xa0, 0x7c, 0x0, 0x19, 0xec, 0x38, 0x84, 0xff, 0xf8, 0x38, 0x63, 0xff,
        0xf8, 0x54, 0xa7, 0xef, 0x3e, 0x54, 0xa6, 0x7, 0x7e, 0x28, 0x87, 0x0,
        0x0, 0x2b, 0x6, 0x0, 0x0, 0x41, 0x86, 0x0, 0x14, 0x7c, 0xe9, 0x3, 0xa6,
        0xe8, 0xe4, 0x0, 0x9, 0xf8, 0xe3, 0x0, 0x9, 0x42, 0x0, 0xff, 0xf8, 0x28,
        0x86, 0x0, 0x4, 0x41, 0x9a, 0x0, 0x20, 0x41, 0x86, 0x0, 0x24, 0x38,
        0x63, 0x0, 0x7, 0x38, 0x84, 0x0, 0x7, 0x7c, 0xc9, 0x3, 0xa6, 0x8c, 0xe4,
        0x0, 0x1, 0x9c, 0xe3, 0x0, 0x1, 0x42, 0x0, 0xff, 0xf8, 0xe8, 0x61, 0xff,
        0xf8, 0x4e, 0x80, 0x0, 0x20, 0x54, 0x66, 0x7, 0xbe, 0x80, 0xa4, 0x0,
        0x8, 0x28, 0x6, 0x0, 0x0, 0x40, 0x82, 0x0, 0x10, 0x90, 0xa3, 0x0, 0x8,
        0xe8, 0x61, 0xff, 0xf8, 0x4e, 0x80, 0x0, 0x20, 0x89, 0x4, 0x0, 0x8,
        0x88, 0xe4, 0x0, 0x9, 0x88, 0xc4, 0x0, 0xa, 0x99, 0x3, 0x0, 0x8, 0x98,
        0xe3, 0x0, 0x9, 0x98, 0xc3, 0x0, 0xa, 0x98, 0xa3, 0x0, 0xb, 0xe8, 0x61,
        0xff, 0xf8, 0x4e, 0x80, 0x0, 0x20, 0x54, 0x66, 0x6, 0x7e, 0x38, 0x63,
        0xff, 0xf8, 0x38, 0x84, 0xff, 0xf8, 0x28, 0x6, 0x0, 0x0, 0x20, 0xc6,
        0x0, 0x80, 0x41, 0x82, 0x0, 0x1c, 0x54, 0xc7, 0xe8, 0xfe, 0x7c, 0xa6,
        0x28, 0x50, 0x7c, 0xe9, 0x3, 0xa6, 0xe8, 0xe4, 0x0, 0x9, 0xf8, 0xe3,
        0x0, 0x9, 0x42, 0x0, 0xff, 0xf8, 0x54, 0xa6, 0xc9, 0xfe, 0x28, 0x6, 0x0,
        0x0, 0x41, 0x82, 0xff, 0x38, 0x39, 0x45, 0x0, 0x7f, 0x54, 0xa8, 0x6,
        0x7e, 0x55, 0x4a, 0xc9, 0xfe, 0x28, 0x88, 0x0, 0x0, 0x39, 0x4a, 0xff,
        0xff, 0x55, 0x4a, 0x7, 0x7e, 0x39, 0x4a, 0x0, 0x1, 0x39, 0x20, 0x0, 0x8,
        0x7d, 0x49, 0x3, 0xa6, 0x7c, 0x9, 0x22, 0x2c, 0x39, 0x29, 0x0, 0x80,
        0x42, 0x0, 0xff, 0xf8, 0x7d, 0x84, 0x2a, 0x14, 0x39, 0x40, 0x0, 0x8,
        0x7d, 0x69, 0x60, 0x50, 0x7d, 0x83, 0x2a, 0x14, 0x7c, 0xc9, 0x3, 0xa6,
        0xe8, 0xc4, 0x0, 0x8, 0xe8, 0xe4, 0x0, 0x10, 0xe9, 0x4, 0x0, 0x18, 0xf8,
        0xc3, 0x0, 0x8, 0xe8, 0xc4, 0x0, 0x20, 0xf8, 0xe3, 0x0, 0x10, 0xe8,
        0xe4, 0x0, 0x28, 0xf9, 0x3, 0x0, 0x18, 0xe9, 0x4, 0x0, 0x30, 0xf8, 0xc3,
        0x0, 0x20, 0xe8, 0xc4, 0x0, 0x38, 0xf8, 0xe3, 0x0, 0x28, 0xe8, 0xe4,
        0x0, 0x40, 0xf9, 0x3, 0x0, 0x30, 0xe9, 0x4, 0x0, 0x48, 0xf8, 0xc3, 0x0,
        0x38, 0xe8, 0xc4, 0x0, 0x50, 0xf8, 0xe3, 0x0, 0x40, 0xe8, 0xe4, 0x0,
        0x58, 0xf9, 0x3, 0x0, 0x48, 0xe9, 0x4, 0x0, 0x60, 0xf8, 0xc3, 0x0, 0x50,
        0xe8, 0xc4, 0x0, 0x68, 0xf8, 0xe3, 0x0, 0x58, 0xe8, 0xe4, 0x0, 0x70,
        0xf9, 0x3, 0x0, 0x60, 0xe9, 0x4, 0x0, 0x78, 0xf8, 0xc3, 0x0, 0x68, 0xe8,
        0xc4, 0x0, 0x81, 0xf8, 0xe3, 0x0, 0x70, 0xf9, 0x3, 0x0, 0x78, 0xf8,
        0xc3, 0x0, 0x81, 0x7c, 0x4, 0x58, 0x40, 0x40, 0x80, 0x0, 0x10, 0x7c,
        0x9, 0x22, 0x2c, 0x42, 0x0, 0xff, 0x74, 0x4b, 0xff, 0xfe, 0x60, 0x41,
        0x86, 0x0, 0x10, 0x39, 0x0, 0xff, 0xff, 0x7c, 0x8, 0x61, 0xec, 0x28,
        0x88, 0x0, 0x0, 0x42, 0x0, 0xff, 0x5c, 0x4b, 0xff, 0xfe, 0x48, 0x38,
        0x84, 0xff, 0xfc, 0x40, 0x9c, 0x0, 0x54, 0x7c, 0x0, 0x19, 0xec, 0x38,
        0x63, 0xff, 0xfc, 0x54, 0xa7, 0xf6, 0xfe, 0x54, 0xa6, 0x7, 0xbe, 0x28,
        0x87, 0x0, 0x0, 0x2b, 0x6, 0x0, 0x0, 0x41, 0x86, 0x0, 0x14, 0x7c, 0xe9,
        0x3, 0xa6, 0x84, 0xe4, 0x0, 0x4, 0x94, 0xe3, 0x0, 0x4, 0x42, 0x0, 0xff,
        0xf8, 0x41, 0x9a, 0x0, 0x1c, 0x38, 0x63, 0x0, 0x3, 0x38, 0x84, 0x0, 0x3,
        0x7c, 0xc9, 0x3, 0xa6, 0x8c, 0xe4, 0x0, 0x1, 0x9c, 0xe3, 0x0, 0x1, 0x42,
        0x0, 0xff, 0xf8, 0xe8, 0x61, 0xff, 0xf8, 0x4e, 0x80, 0x0, 0x20, 0x54,
        0x66, 0x6, 0x7e, 0x38, 0x63, 0xff, 0xfc, 0x28, 0x6, 0x0, 0x0, 0x20,
        0xc6, 0x0, 0x80, 0x41, 0x82, 0x0, 0x1c, 0x54, 0xc7, 0xf0, 0xbe, 0x7c,
        0xa6, 0x28, 0x50, 0x7c, 0xe9, 0x3, 0xa6, 0x84, 0xe4, 0x0, 0x4, 0x94,
        0xe3, 0x0, 0x4, 0x42, 0x0, 0xff, 0xf8, 0x54, 0xa6, 0xc9, 0xfe, 0x28,
        0x6, 0x0, 0x0, 0x41, 0x82, 0xff, 0x84, 0x39, 0x45, 0x0, 0x7f, 0x54,
        0xa8, 0x6, 0x7e, 0x55, 0x4a, 0xc9, 0xfe, 0x28, 0x88, 0x0, 0x0, 0x39,
        0x4a, 0xff, 0xff, 0x55, 0x4a, 0x7, 0x7e, 0x39, 0x4a, 0x0, 0x1, 0x39,
        0x20, 0x0, 0x4, 0x7d, 0x49, 0x3, 0xa6, 0x7c, 0x9, 0x22, 0x2c, 0x39,
        0x29, 0x0, 0x80, 0x42, 0x0, 0xff, 0xf8, 0x7d, 0x84, 0x2a, 0x14, 0x39,
        0x40, 0x0, 0x8, 0x7d, 0x69, 0x60, 0x50, 0x7d, 0x83, 0x2a, 0x14, 0x7c,
        0xc9, 0x3, 0xa6, 0x38, 0xc0, 0x0, 0x8, 0x38, 0xc6, 0xff, 0xff, 0x80,
        0x4, 0x0, 0x4, 0x80, 0xe4, 0x0, 0x8, 0x81, 0x4, 0x0, 0xc, 0x28, 0x6,
        0x0, 0x0, 0x90, 0x3, 0x0, 0x4, 0x84, 0x4, 0x0, 0x10, 0x90, 0xe3, 0x0,
        0x8, 0x91, 0x3, 0x0, 0xc, 0x94, 0x3, 0x0, 0x10, 0x40, 0x82, 0xff, 0xd8,
        0x7c, 0x4, 0x58, 0x40, 0x40, 0x80, 0x0, 0x10, 0x7c, 0x9, 0x22, 0x2c,
        0x42, 0x0, 0xff, 0xc4, 0x4b, 0xff, 0xfe, 0xfc, 0x41, 0x86, 0x0, 0x10,
        0x39, 0x0, 0xff, 0xff, 0x7c, 0x8, 0x61, 0xec, 0x28, 0x88, 0x0, 0x0,
        0x42, 0x0, 0xff, 0xac, 0x4b, 0xff, 0xfe, 0xe4, 0x38, 0x84, 0xff, 0xff,
        0x40, 0x9c, 0x0, 0x30, 0x7c, 0x0, 0x19, 0xec, 0x38, 0x63, 0xff, 0xff,
        0x54, 0xa6, 0x6, 0x7e, 0x28, 0x6, 0x0, 0x0, 0x7c, 0xc9, 0x3, 0xa6, 0x41,
        0x82, 0x0, 0x10, 0x8c, 0xc4, 0x0, 0x1, 0x9c, 0xc3, 0x0, 0x1, 0x42, 0x0,
        0xff, 0xf8, 0xe8, 0x61, 0xff, 0xf8, 0x4e, 0x80, 0x0, 0x20, 0x54, 0x66,
        0x6, 0x7e, 0x38, 0x63, 0xff, 0xff, 0x28, 0x6, 0x0, 0x0, 0x20, 0xc6, 0x0,
        0x80, 0x41, 0x82, 0x0, 0x18, 0x7c, 0xa6, 0x28, 0x50, 0x7c, 0xc9, 0x3,
        0xa6, 0x8c, 0xc4, 0x0, 0x1, 0x9c, 0xc3, 0x0, 0x1, 0x42, 0x0, 0xff, 0xf8,
        0x54, 0xa6, 0xc9, 0xfe, 0x28, 0x6, 0x0, 0x0, 0x41, 0x82, 0xff, 0xac,
        0x39, 0x45, 0x0, 0x7f, 0x54, 0xa8, 0x6, 0x7e, 0x55, 0x4a, 0xc9, 0xfe,
        0x28, 0x88, 0x0, 0x0, 0x39, 0x4a, 0xff, 0xff, 0x55, 0x4a, 0x7, 0x7e,
        0x39, 0x4a, 0x0, 0x1, 0x39, 0x20, 0x0, 0x1, 0x7d, 0x49, 0x3, 0xa6, 0x7c,
        0x9, 0x22, 0x2c, 0x39, 0x29, 0x0, 0x80, 0x42, 0x0, 0xff, 0xf8, 0x7d,
        0x84, 0x2a, 0x14, 0x39, 0x40, 0x0, 0x1, 0x7d, 0x69, 0x60, 0x50, 0x7d,
        0x83, 0x2a, 0x14, 0x7c, 0xc9, 0x3, 0xa6, 0x38, 0xc0, 0x0, 0x20, 0x88,
        0xe4, 0x0, 0x4, 0x89, 0x4, 0x0, 0x3, 0x38, 0xc6, 0xff, 0xff, 0x51, 0x7,
        0x44, 0x2e, 0x89, 0x24, 0x0, 0x2, 0x28, 0x6, 0x0, 0x0, 0x51, 0x27, 0x82,
        0x1e, 0x89, 0x44, 0x0, 0x1, 0x38, 0x84, 0x0, 0x4, 0x51, 0x47, 0xc0, 0xe,
        0x90, 0xe3, 0x0, 0x1, 0x38, 0x63, 0x0, 0x4, 0x40, 0x82, 0xff, 0xd0,
        0x7c, 0x4, 0x58, 0x40, 0x40, 0x80, 0x0, 0x10, 0x7c, 0x9, 0x22, 0x2c,
        0x42, 0x0, 0xff, 0xbc, 0x4b, 0xff, 0xff, 0x1c, 0x41, 0x86, 0x0, 0x10,
        0x39, 0x0, 0xff, 0xff, 0x7c, 0x8, 0x61, 0xec, 0x28, 0x88, 0x0, 0x0,
        0x42, 0x0, 0xff, 0xa4, 0x4b, 0xff, 0xff, 0x4>>;

using match_strncmp_variant1 = ppcbuiltin_matcher_t<
    PPCBuiltin::strncmp_variant1,
    scanbytes<0x7c, 0xa0, 0x2b, 0x79, 0x7c, 0xa9, 0x3, 0xa6, 0x40, 0x81, 0x0,
              0x3c, 0x89, 0x3, 0x0, 0x0, 0x88, 0xe4, 0x0, 0x0, 0x7c, 0x6a, 0x1b,
              0x78, 0x2c, 0x88, 0x0, 0x0, 0x7c, 0x67, 0x40, 0x11, 0x40, 0x6,
              0x0, 0x8, 0x4e, 0x80, 0x0, 0x20, 0x4c, 0x82, 0x0, 0x20, 0x8d, 0xa,
              0x0, 0x1, 0x8c, 0xe4, 0x0, 0x1, 0x2c, 0x88, 0x0, 0x0, 0x7c, 0x67,
              0x40, 0x11, 0x40, 0x6, 0xff, 0xec, 0x4e, 0x80, 0x0, 0x20, 0x38,
              0x60, 0x0, 0x0, 0x4e, 0x80, 0x0, 0x20>>;

using match_xbox_optimized_memset_variant1 = ppcbuiltin_matcher_t<
    PPCBuiltin::Memset, scanbytes<0x7d, 0x88, 0x2, 0xa6>,
    blmatch<match_savegplr29>,
    scanbytes<0x7c, 0x6a, 0x1b, 0x78, 0x2b, 0x5, 0x0, 0x10, 0x40, 0x98, 0x0,
              0x2c, 0x2b, 0x5, 0x0, 0x0, 0x41, 0x9a, 0x1, 0x88, 0x7c, 0x8a, 0x7,
              0x74, 0x39, 0x63, 0xff, 0xff, 0x28, 0x5, 0x0, 0x0, 0x41, 0x82,
              0x1, 0x78, 0x7c, 0xa9, 0x3, 0xa6, 0x9d, 0x4b, 0x0, 0x1, 0x42, 0x0,
              0xff, 0xfc, 0x48, 0x0, 0x1, 0x68, 0x7d, 0x63, 0x0, 0xd0, 0x10,
              0x4, 0x3, 0xc, 0x7d, 0xa0, 0x20, 0xc, 0x7d, 0x69, 0x26, 0x70,
              0x7c, 0x88, 0x26, 0x70, 0x55, 0x6b, 0x7, 0x3f, 0x7d, 0x80, 0x40,
              0xc, 0x55, 0x29, 0x7, 0x7e, 0x10, 0xc, 0x1, 0x4, 0x10, 0xd, 0x4,
              0x84, 0x10, 0x0, 0x2, 0xc, 0x41, 0x82, 0x0, 0x10, 0x7c, 0x0, 0x1d,
              0xe, 0x7c, 0xab, 0x28, 0x50, 0x7d, 0x4b, 0x1a, 0x14, 0x54, 0xab,
              0xe1, 0x3e, 0x7f, 0xb, 0x48, 0x40, 0x40, 0x98, 0x0, 0x8, 0x7d,
              0x69, 0x5b, 0x78>,
    // 82188F98
    masked_compare_push<0x3d60 << 16>,

    // 0x3d,0x60,0x82,0xa0,
    scanbytes<0x2b, 0x9, 0x0, 0x0>, masked_compare_push<0x80cb << 16>,

    // 0x80,0xcb,0x67,0xb0,
    lis_sdisp16_addr_memcmp<2, 1, 0x00, 0x00, 0x00, 0x10>,
    scanbytes<
        0x41, 0x9a, 0x0, 0x14, 0x7d, 0x29, 0x3, 0xa6, 0x10, 0x0, 0x51, 0xc3,
        0x7d, 0x46, 0x52, 0x14, 0x42, 0x0, 0xff, 0xf8, 0x55, 0x2b, 0x20, 0x36,
        0x54, 0x89, 0x6, 0x3f, 0x7c, 0xeb, 0x28, 0x50, 0x54, 0xeb, 0xc9, 0xfe,
        0x40, 0x82, 0x0, 0x20, 0x2b, 0xb, 0x0, 0x0, 0x41, 0x9a, 0x0, 0xb4, 0x7d,
        0x69, 0x3, 0xa6, 0x7c, 0x20, 0x57, 0xec, 0x39, 0x4a, 0x0, 0x80, 0x42,
        0x0, 0xff, 0xf8, 0x48, 0x0, 0x0, 0xa0, 0x2b, 0xb, 0x0, 0x4, 0x7d, 0x68,
        0x5b, 0x78, 0x41, 0x98, 0x0, 0x8, 0x39, 0x0, 0x0, 0x4, 0x39, 0x20, 0x0,
        0x0, 0x2b, 0x8, 0x0, 0x0, 0x41, 0x9a, 0x0, 0x18, 0x7d, 0x9, 0x3, 0xa6,
        0x55, 0x28, 0x38, 0x30, 0x7c, 0x28, 0x57, 0xec, 0x39, 0x29, 0x0, 0x1,
        0x42, 0x0, 0xff, 0xf4, 0x39, 0x20, 0x0, 0x0, 0x2b, 0xb, 0x0, 0x0, 0x41,
        0x9a, 0x0, 0x64, 0x7d, 0x69, 0x3, 0xa6, 0x39, 0x9, 0x0, 0x4, 0x7f, 0x8,
        0x58, 0x40, 0x40, 0x98, 0x0, 0xc, 0x39, 0x0, 0x2, 0x0, 0x7c, 0x28, 0x57,
        0xec, 0x39, 0x0, 0x0, 0x10, 0x10, 0x0, 0x51, 0xc3, 0x38, 0xa0, 0x0,
        0x20, 0x38, 0x80, 0x0, 0x30, 0x3b, 0xe0, 0x0, 0x40, 0x3b, 0xc0, 0x0,
        0x50, 0x10, 0xa, 0x41, 0xc3, 0x3b, 0xa0, 0x0, 0x60, 0x39, 0x0, 0x0,
        0x70, 0x10, 0xa, 0x29, 0xc3, 0x10, 0xa, 0x21, 0xc3, 0x39, 0x29, 0x0,
        0x1, 0x10, 0xa, 0xf9, 0xc3, 0x10, 0xa, 0xf1, 0xc3, 0x10, 0xa, 0xe9,
        0xc3, 0x10, 0xa, 0x41, 0xc3, 0x39, 0x4a, 0x0, 0x80, 0x42, 0x0, 0xff,
        0xa8, 0x55, 0x6b, 0x38, 0x30, 0x7d, 0x6b, 0x38, 0x50, 0x2b, 0xb, 0x0,
        0x10, 0x41, 0x98, 0x0, 0x1c, 0x55, 0x69, 0xe1, 0x3e, 0x7d, 0x29, 0x3,
        0xa6, 0x10, 0x0, 0x51, 0xc3, 0x7d, 0x46, 0x52, 0x14, 0x39, 0x6b, 0xff,
        0xf0, 0x42, 0x0, 0xff, 0xf4, 0x7c, 0xa, 0x5d, 0x4e

        >,
    bmatch<match_restgplr29>>;

using match_block_based_memcpy_scanbytes = scanbytes<
    0x38, 0x5, 0x0, 0x1, 0x60, 0x66, 0x0, 0x0, 0x7c, 0x9, 0x3, 0xa6, 0x48, 0x0,
    0x0, 0x18, 0x38, 0xa5, 0xff, 0xff, 0x88, 0x4, 0x0, 0x0, 0x38, 0x84, 0x0,
    0x1, 0x98, 0x6, 0x0, 0x0, 0x38, 0xc6, 0x0, 0x1, 0x70, 0xc0, 0x0, 0x3, 0x40,
    0x2, 0xff, 0xe8, 0x54, 0xa0, 0xf0, 0xbf, 0x41, 0xc2, 0x0, 0x24, 0x7c, 0x9,
    0x3, 0xa6, 0x70, 0x80, 0x0, 0x3, 0x40, 0xc2, 0x0, 0x3c, 0x80, 0xe4, 0x0,
    0x0, 0x38, 0x84, 0x0, 0x4, 0x90, 0xe6, 0x0, 0x0, 0x38, 0xc6, 0x0, 0x4, 0x43,
    0x20, 0xff, 0xf0, 0x70, 0xa0, 0x0, 0x3, 0x7c, 0x9, 0x3, 0xa6, 0x4d, 0xe2,
    0x0, 0x20, 0x88, 0x4, 0x0, 0x0, 0x38, 0x84, 0x0, 0x1, 0x98, 0x6, 0x0, 0x0,
    0x38, 0xc6, 0x0, 0x1, 0x43, 0x20, 0xff, 0xf0, 0x4e, 0x80, 0x0, 0x20, 0x88,
    0xe4, 0x0, 0x3, 0x89, 0x4, 0x0, 0x2, 0x51, 0x7, 0x44, 0x2e, 0x89, 0x24, 0x0,
    0x1, 0x51, 0x27, 0x82, 0x1e, 0x89, 0x44, 0x0, 0x0, 0x51, 0x47, 0xc0, 0xe,
    0x38, 0x84, 0x0, 0x4, 0x90, 0xe6, 0x0, 0x0, 0x38, 0xc6, 0x0, 0x4, 0x42, 0x0,
    0xff, 0xd8, 0x4b, 0xff, 0xff, 0xb0>;
using match_block_based_memcpy =
    ppcbuiltin_matcher_t<PPCBuiltin::Memmove_standard,
                         match_block_based_memcpy_scanbytes>;

using match_cacheline_copy_func = scanbytes<
    0x38, 0xc0, 0x0, 0x10, 0x38, 0xe0, 0x0, 0x20, 0x39, 0x0, 0x0, 0x30, 0x39,
    0x20, 0x0, 0x3f, 0x39, 0x40, 0x4, 0x0, 0x39, 0x80, 0x0, 0x80, 0x28, 0x5,
    0x0, 0x80, 0x7c, 0x0, 0x20, 0xc, 0x4d, 0x80, 0x0, 0x20, 0x2b, 0x85, 0x1,
    0x0, 0x28, 0x5, 0x4, 0x0, 0x41, 0x9c, 0x0, 0x10, 0x40, 0x81, 0x0, 0x8, 0x7c,
    0xa, 0x22, 0x2c, 0x7c, 0x2c, 0x1f, 0xec, 0x7c, 0x20, 0x20, 0xce, 0x39, 0x64,
    0x0, 0x40, 0x7c, 0x46, 0x20, 0xce, 0x7c, 0x67, 0x20, 0xce, 0x10, 0x21, 0x10,
    0x2b, 0x7c, 0x88, 0x20, 0xce, 0x10, 0x42, 0x18, 0x2b, 0x7c, 0xa0, 0x58,
    0xce, 0x10, 0x63, 0x20, 0x2b, 0x7c, 0xc6, 0x58, 0xce, 0x10, 0x84, 0x28,
    0x2b, 0x7c, 0xe7, 0x58, 0xce, 0x10, 0xa5, 0x30, 0x2b, 0x7d, 0x8, 0x58, 0xce,
    0x10, 0xc6, 0x38, 0x2b, 0x7d, 0x29, 0x58, 0xce, 0x10, 0xe7, 0x40, 0x2b,
    0x7c, 0x20, 0x19, 0xce, 0x11, 0x8, 0x48, 0x2b, 0x7c, 0x46, 0x19, 0xce, 0x39,
    0x63, 0x0, 0x40, 0x7c, 0x67, 0x19, 0xce, 0x38, 0x84, 0x0, 0x80, 0x7c, 0x88,
    0x19, 0xce, 0x38, 0x63, 0x0, 0x80, 0x7c, 0xa0, 0x59, 0xce, 0x38, 0xa5, 0xff,
    0x80, 0x7c, 0xc6, 0x59, 0xce, 0x28, 0x5, 0x0, 0x80, 0x7c, 0xe7, 0x59, 0xce,
    0x7d, 0x8, 0x59, 0xce, 0x40, 0x80, 0xff, 0x6c, 0x4e, 0x80, 0x0, 0x20>;

using match_d3d_memcpy = ppcbuiltin_matcher_t<
    PPCBuiltin::Memcpy_standard_variant1, scanbytes<0x7d, 0x88, 0x2, 0xa6>,

    // 0x48,0x50,0xc8,0x2d,
    blmatch<match_savegplr26>,
    scanbytes<0x94, 0x21, 0xff, 0x50, 0x7c, 0x7a, 0x1b, 0x78, 0x7c, 0xbd, 0x2b,
              0x78, 0x7f, 0x5e, 0xd3, 0x78, 0x7c, 0x9f, 0x23, 0x78, 0x2b, 0x1d,
              0x0, 0x10, 0x40, 0x98, 0x0, 0xa8, 0x2b, 0x1d, 0x0, 0x8, 0x41,
              0x98, 0x0, 0x24, 0x54, 0x8b, 0x7, 0x7e, 0x2f, 0xb, 0x0, 0x0, 0x40,
              0x9a, 0x0, 0x18, 0xe9, 0x64, 0x0, 0x0, 0x3b, 0xda, 0x0, 0x8, 0x3b,
              0xe4, 0x0, 0x8, 0x3b, 0xbd, 0xff, 0xf8, 0xf9, 0x7a, 0x0, 0x0,
              0x57, 0xeb, 0x7, 0xbe, 0x2f, 0xb, 0x0, 0x0, 0x40, 0x9a, 0x0, 0x3c,
              0x2b, 0x1d, 0x0, 0x4, 0x41, 0x98, 0x0, 0x34, 0x57, 0xbc, 0xf0,
              0xbe, 0x7f, 0xe4, 0xfb, 0x78, 0x7f, 0xc3, 0xf3, 0x78,

              0x57, 0x85, 0x10, 0x3a>,
    blmatch<match_block_based_memcpy_scanbytes>,

    /// 0x48,0x50,0xcc,0xf9,
    scanbytes<0x57, 0x8b, 0x10, 0x3a, 0x7f, 0xcb, 0xf2, 0x14, 0x7f, 0xeb, 0xfa,
              0x14, 0x3b, 0x9c, 0xff, 0xff, 0x3b, 0xbd, 0xff, 0xfc, 0x2b, 0x1c,
              0x0, 0x0, 0x40, 0x9a, 0xff, 0xf4, 0x2b, 0x1d, 0x0, 0x0, 0x41,
              0x9a, 0x2, 0x78>,
    masked_compare_push<0x3d60 << 16>,

    // 0x3d,0x60,0x82,0x72,
    masked_compare_push<0x816b << 16>,

    // 0x81,0x6b,0x1e,0xc4,
    lis_sdisp16_addr_memcmp<2, 1, 0x00, 0x00, 0x00, 0x01>,
    scanbytes<

        0x89, 0x5f, 0x0, 0x0, 0x7f, 0xab, 0xe8, 0x50, 0x3b, 0xff, 0x0, 0x1,
        0x2b, 0x1d, 0x0, 0x0, 0x99, 0x5e, 0x0, 0x0, 0x3b, 0xde, 0x0, 0x1,

        0x40, 0x9a, 0xff, 0xe8, 0x7f, 0x43, 0xd3, 0x78, 0x38, 0x21, 0x0, 0xb0>,
    bmatch<match_restgplr26>,
    // 0x48,0x50,0xc7,0xbc,
    scanbytes<
        0x7d, 0x7a, 0x0, 0xd0, 0x2b, 0x1d, 0x4, 0x0, 0x55, 0x6a, 0x7, 0x3e,
        0x7d, 0x6b, 0x26, 0x70, 0x7f, 0xa9, 0xeb, 0x78, 0x55, 0x68, 0x7, 0x7e,
        0x91, 0x1, 0x0, 0x58, 0x41, 0x98, 0x0, 0x8, 0x39, 0x20, 0x4, 0x0, 0x39,
        0x60, 0x0, 0x0, 0x2b, 0x9, 0x0, 0x0, 0x41, 0x9a, 0x0, 0x14, 0x7c, 0xb,
        0x22, 0x2c, 0x39, 0x6b, 0x0, 0x80, 0x7f, 0xb, 0x48, 0x40, 0x41, 0x98,
        0xff, 0xf4, 0x3b, 0x60, 0x0, 0xf, 0x2b, 0xa, 0x0, 0x0, 0x41, 0x9a, 0x0,
        0x24, 0x10, 0x0, 0x20, 0xc3, 0x7f, 0xca, 0xd2, 0x14, 0x11, 0xa4, 0xd8,
        0xc3, 0x7f, 0xea, 0x22, 0x14, 0x7c, 0xe0, 0x20, 0xc, 0x7f, 0xaa, 0xe8,
        0x50, 0x10, 0x0, 0x69, 0xeb, 0x7c, 0x0, 0xd5, 0xe, 0x57, 0xab, 0xe1,
        0x3e, 0x7f, 0xb, 0x40, 0x40, 0x40, 0x98, 0x0, 0xc, 0x7d, 0x68, 0x5b,
        0x78, 0x91, 0x1, 0x0, 0x58, 0x55, 0xb, 0x20, 0x36, 0x7d, 0x6b, 0xe8,
        0x50, 0x55, 0x7c, 0x0, 0x30, 0x2b, 0x1c, 0x0, 0x80, 0x7f, 0x8a, 0xe3,
        0x78, 0x93, 0x81, 0x0, 0x5c, 0x41, 0x98, 0x0, 0x8, 0x39, 0x40, 0x0,
        0x80, 0x39, 0x60, 0x0, 0x0, 0x91, 0x41, 0x0, 0x54, 0x2b, 0xa, 0x0, 0x0,
        0x91, 0x61, 0x0, 0x50, 0x41, 0x9a, 0x0, 0x2c, 0x39, 0x5e, 0x0, 0x7f,
        0x7c, 0x2b, 0x57, 0xec, 0x81, 0x61, 0x0, 0x50, 0x81, 0x21, 0x0, 0x54,
        0x39, 0x6b, 0x0, 0x80, 0x7f, 0xb, 0x48, 0x40, 0x91, 0x61, 0x0, 0x50,
        0x41, 0x98, 0xff, 0xe8, 0x81, 0x1, 0x0, 0x58, 0x83, 0x81, 0x0, 0x5c,
        0x39, 0x61, 0x0, 0x60, 0x7c, 0x0, 0xf8, 0xc, 0x2b, 0x8, 0x0, 0x0, 0x10,
        0x0, 0x59, 0xc3, 0x41, 0x9a, 0x0, 0x2c, 0x7d, 0xb, 0x43, 0x78, 0x11,
        0xa0, 0xf8, 0xc3, 0x39, 0x6b, 0xff, 0xff, 0x11, 0x9f, 0xd8, 0xc3, 0x3b,
        0xff, 0x0, 0x10, 0x11, 0xad, 0x60, 0x2b, 0x2b, 0xb, 0x0, 0x0, 0x11,
        0xa0, 0xf1, 0xc3, 0x3b, 0xde, 0x0, 0x10, 0x40, 0x9a, 0xff, 0xe0, 0x55,
        0xb, 0x20, 0x36, 0x57, 0xea, 0x7, 0x3e, 0x7f, 0xab, 0xe8, 0x50, 0x2f,
        0xa, 0x0, 0x0, 0x40, 0x9a, 0x0, 0xa0, 0x2b, 0x1d, 0x0, 0x80, 0x41, 0x98,
        0x0, 0xbc, 0x38, 0xa0, 0x0, 0x10, 0x38, 0xc0, 0x0, 0x20, 0x38, 0xe0,
        0x0, 0x30, 0x39, 0x0, 0x0, 0x40, 0x39, 0x20, 0x0, 0x50, 0x39, 0x40, 0x0,
        0x60, 0x39, 0x60, 0x0, 0x70, 0x2b, 0x1d, 0x4, 0x0, 0x40, 0x99, 0x0, 0xc,
        0x38, 0x80, 0x4, 0x0, 0x7c, 0x4, 0xfa, 0x2c, 0x2b, 0x1d, 0x1, 0x0, 0x40,
        0x99, 0x0, 0xc, 0x38, 0x80, 0x0, 0x80, 0x7c, 0x24, 0xf7, 0xec, 0x11,
        0xa0, 0xf8, 0xc3, 0x3b, 0xbd, 0xff, 0x80, 0x11, 0xa0, 0xf1, 0xc3, 0x11,
        0xbf, 0x28, 0xc3, 0x2b, 0x1d, 0x0, 0x80, 0x11, 0x9f, 0x30, 0xc3, 0x11,
        0x7f, 0x38, 0xc3, 0x11, 0x5f, 0x40, 0xc3, 0x11, 0x3f, 0x48, 0xc3, 0x11,
        0x1f, 0x50, 0xc3, 0x10, 0xff, 0x58, 0xc3,

        0x3b, 0xff, 0x0, 0x80, 0x11, 0xbe, 0x29, 0xc3, 0x11, 0x9e, 0x31, 0xc3,
        0x11, 0x7e, 0x39, 0xc3, 0x11, 0x5e, 0x41, 0xc3, 0x11, 0x3e, 0x49, 0xc3,
        0x11, 0x1e, 0x51, 0xc3, 0x10, 0xfe, 0x59, 0xc3, 0x3b, 0xde, 0x0, 0x80,
        0x40, 0x98, 0xff, 0x90, 0x48, 0x0, 0x0, 0x28, 0x7f, 0x85, 0xe3, 0x78,
        0x7f, 0xe4, 0xfb, 0x78, 0x7f, 0xc3, 0xf3, 0x78>,
    blmatch<match_cacheline_copy_func>,
    // 0x48,0x51,0xf5,0xc5,
    scanbytes<0x39, 0x61, 0x0, 0x60, 0x7f, 0xdc, 0xf2, 0x14, 0x7f, 0xfc, 0xfa,
              0x14, 0x7f, 0xbc, 0xe8, 0x50, 0x10, 0x0, 0x58, 0xc3,

              0x2b, 0x1d, 0x0, 0x10, 0x41, 0x98, 0x0, 0x30, 0x57, 0xab, 0xe1,
              0x3e, 0x11, 0xa0, 0xf8, 0xc3, 0x39, 0x6b, 0xff, 0xff, 0x11, 0x9f,
              0xd8, 0xc3, 0x3b, 0xbd, 0xff, 0xf0, 0x11, 0xad, 0x60, 0x2b, 0x3b,
              0xff, 0x0, 0x10, 0x2b, 0xb, 0x0, 0x0, 0x11, 0xa0, 0xf1, 0xc3,
              0x3b, 0xde, 0x0, 0x10, 0x40, 0x9a, 0xff, 0xdc, 0x2b, 0x1d, 0x0,
              0x0, 0x41, 0x9a, 0x0, 0x20, 0x7d, 0x7f, 0xea, 0x14, 0x11, 0xa0,
              0xf8, 0xc3, 0x39, 0x40, 0xff, 0xff, 0x7c, 0x1f, 0xe8, 0xc, 0x11,
              0x8b, 0x50, 0xc3, 0x10, 0xd, 0x60, 0x2b, 0x7c, 0x1e, 0xed, 0x4e,
              0x7f, 0x43, 0xd3, 0x78, 0x38, 0x21, 0x0, 0xb0>,
    bmatch<match_restgplr26>>;

using data_iter_func1_matchbytes =
    scanbytes<0xfb, 0xe1, 0xff, 0xf8, 0x7c, 0x6b, 0x1b, 0x78, 0x38, 0x60, 0xff,
              0xff, 0x2f, 0x4, 0x0, 0x0, 0x41, 0x98, 0x0, 0x64, 0x80, 0xcb, 0x0,
              0x38, 0x7f, 0x4, 0x30, 0x0, 0x40, 0x98, 0x0, 0x58, 0x81, 0x4b,
              0x0, 0x24, 0x38, 0xe0, 0x0, 0x1, 0x81, 0x2b, 0x0, 0x48, 0x81, 0xb,
              0x0, 0x44, 0x7d, 0x6a, 0x21, 0xd6, 0x7c, 0xb, 0x42, 0x2c, 0x54,
              0x85, 0x6, 0xfe, 0x7c, 0x9f, 0x2e, 0x70, 0x57, 0xff, 0x10, 0x3a,
              0x7f, 0xff, 0x48, 0x2e, 0x7c, 0xe5, 0x28, 0x30, 0x7c, 0xa5, 0xf8,
              0x38, 0x2b, 0x5, 0x0, 0x0, 0x40, 0x9a, 0x0, 0x1c, 0x38, 0x84, 0x0,
              0x1, 0x7d, 0x6b, 0x52, 0x14, 0x7f, 0x4, 0x30, 0x0, 0x41, 0x98,
              0xff, 0xd0, 0xeb, 0xe1, 0xff, 0xf8, 0x4e, 0x80, 0x0, 0x20, 0x7c,
              0x83, 0x23, 0x78, 0xeb, 0xe1, 0xff, 0xf8, 0x4e, 0x80, 0x0, 0x20>;

using match_data_iter_func1 =
    ppcbuiltin_matcher_t<PPCBuiltin::bungie_data_iter_func1,
                         data_iter_func1_matchbytes>;

using match_bungie_data_iter_increment = ppcbuiltin_matcher_t<
    PPCBuiltin::bungie_data_iter_increment_h3,
    scanbytes<0x7d, 0x88, 0x2, 0xa6, 0x91, 0x81, 0xff, 0xf8, 0xfb, 0xc1, 0xff,
              0xe8, 0xfb, 0xe1, 0xff, 0xf0, 0x94, 0x21, 0xff, 0x90, 0x7c, 0x7f,
              0x1b, 0x78, 0x83, 0xdf, 0x0, 0x0, 0x81, 0x7f, 0x0, 0x8, 0x7f,
              0xc3, 0xf3, 0x78, 0x38, 0x8b, 0x0, 0x1>,
    // 0x48,0x16,0x80,0x49,
    blmatch<data_iter_func1_matchbytes>,
    scanbytes<0x7c, 0x6b, 0x1b, 0x78, 0x2f, 0xb, 0xff, 0xff, 0x41, 0x9a, 0x0,
              0x2c, 0x81, 0x5e, 0x0, 0x24, 0x81, 0x3e, 0x0, 0x44, 0x7d, 0x4a,
              0x59, 0xd6, 0x91, 0x7f, 0x0, 0x8, 0x7c, 0x6a, 0x4a, 0x14, 0xa1,
              0x43, 0x0, 0x0, 0x55, 0x4a, 0x80, 0x3e, 0x7d, 0x4b, 0x5b, 0x78,
              0x91, 0x7f, 0x0, 0x4, 0x48, 0x0, 0x0, 0x1c, 0x81, 0x7f, 0x0, 0x0,
              0x39, 0x40, 0xff, 0xff, 0x38, 0x60, 0x0, 0x0, 0x81, 0x6b, 0x0,
              0x20, 0x91, 0x5f, 0x0, 0x4, 0x91, 0x7f, 0x0, 0x8, 0x38, 0x21, 0x0,
              0x70, 0x81, 0x81, 0xff, 0xf8, 0x7d, 0x88, 0x3, 0xa6, 0xeb, 0xc1,
              0xff, 0xe8, 0xeb, 0xe1, 0xff, 0xf0, 0x4e, 0x80, 0x0, 0x20>>;

using match_memmove_standard_variant1 = ppcbuiltin_matcher_t<
    PPCBuiltin::Memmove_standard,
    scanbytes<0x7c, 0x3, 0x20, 0x0, 0x4d, 0xc2, 0x0, 0x20, 0x40, 0xe0, 0x0,
              0x8>,
    bmatch<match_memcpy_variant1>,

    // 0x48,0x0,0x10,0x84,
    scanbytes<0x38, 0x5, 0x0, 0x1, 0x7c, 0x63, 0x2a, 0x14, 0x7c, 0x84, 0x2a,
              0x14, 0x7c, 0x9, 0x3, 0xa6, 0x48, 0x0, 0x0, 0x18, 0x38, 0xa5,
              0xff, 0xff, 0x88, 0x4, 0xff, 0xff, 0x38, 0x84, 0xff, 0xff, 0x98,
              0x3, 0xff, 0xff, 0x38, 0x63, 0xff, 0xff, 0x70, 0x60, 0x0, 0x3,
              0x40, 0x2, 0xff, 0xe8, 0x54, 0xa0, 0xf0, 0xbf, 0x41, 0xc2, 0x0,
              0x24, 0x7c, 0x9, 0x3, 0xa6, 0x70, 0x80, 0x0, 0x3, 0x40, 0xc2, 0x0,
              0x3c, 0x80, 0xe4, 0xff, 0xfc, 0x38, 0x84, 0xff, 0xfc, 0x90, 0xe3,
              0xff, 0xfc, 0x38, 0x63, 0xff, 0xfc, 0x43, 0x20, 0xff, 0xf0, 0x70,
              0xa0, 0x0, 0x3, 0x7c, 0x9, 0x3, 0xa6, 0x4d, 0xe2, 0x0, 0x20, 0x88,
              0x4, 0xff, 0xff, 0x38, 0x84, 0xff, 0xff, 0x98, 0x3, 0xff, 0xff,
              0x38, 0x63, 0xff, 0xff, 0x43, 0x20, 0xff, 0xf0, 0x4e, 0x80, 0x0,
              0x20, 0x88, 0xe4, 0xff, 0xff, 0x38, 0x63, 0xff, 0xfc, 0x89, 0x4,
              0xff, 0xfe, 0x51, 0x7, 0x44, 0x2e, 0x89, 0x24, 0xff, 0xfd, 0x51,
              0x27, 0x82, 0x1e, 0x89, 0x44, 0xff, 0xfc, 0x51, 0x47, 0xc0, 0xe,
              0x38, 0x84, 0xff, 0xfc, 0x90, 0xe3, 0x0, 0x0, 0x42, 0x0, 0xff,
              0xd8, 0x4b, 0xff, 0xff, 0xb0>>;

using match_blrfunc = ppcbuiltin_matcher_t<PPCBuiltin::blrfunc,
                                           scanbytes<0x4E, 0x80, 0x00, 0x20>>;

/*
    BEGIN RDR SPECIFIC FUNCTIONS
*/
using match_red_dead_redemption_tinyfunc_823DA208 = ppcbuiltin_matcher_t<
    PPCBuiltin::red_dead_redemption_tinyfunc_823DA208,
    scanbytes<0x81, 0x6d, 0x0, 0x0, 0x39, 0x40, 0x0, 0x78, 0x7c, 0x64, 0x1b,
              0x78, 0x38, 0xc0, 0x0, 0x0, 0x38, 0xa0, 0x0, 0x10, 0x7c, 0x6a,
              0x58, 0x2e, 0x81, 0x23, 0x0, 0x0, 0x81, 0x9, 0x0, 0x8, 0x7d, 0x9,
              0x3, 0xa6, 0x4e, 0x80, 0x4, 0x20>>;

using match_red_dead_redemption_tinyfunc_823DA2F8 = ppcbuiltin_matcher_t<
    PPCBuiltin::red_dead_redemption_tinyfunc_823DA2F8,
    scanbytes<0x7c, 0x64, 0x1b, 0x78, 0x2b, 0x3, 0x0, 0x0, 0x4d, 0x9a, 0x0,
              0x20, 0x81, 0x6d, 0x0, 0x0, 0x39, 0x40, 0x0, 0x78, 0x7c, 0x6a,
              0x58, 0x2e, 0x81, 0x23, 0x0, 0x0, 0x81, 0x9, 0x0, 0x10, 0x7d, 0x9,
              0x3, 0xa6, 0x4e, 0x80, 0x4, 0x20>>;

using match_red_dead_redemption_tinyfunc_823DA328 = ppcbuiltin_matcher_t<
    PPCBuiltin::red_dead_redemption_tinyfunc_823DA328,
    scanbytes<0x7c, 0x64, 0x1b, 0x78, 0x2b, 0x3, 0x0, 0x0, 0x4d, 0x9a, 0x0,
              0x20, 0x81, 0x6d, 0x0, 0x0, 0x39, 0x40, 0x0, 0x78, 0x7c, 0x6a,
              0x58, 0x2e, 0x81, 0x23, 0x0, 0x0, 0x81, 0x9, 0x0, 0x10, 0x7d, 0x9,
              0x3, 0xa6, 0x4e, 0x80, 0x4, 0x20>>;

using match_red_dead_redemption_tinyfunc_823da230 = ppcbuiltin_matcher_t<
    PPCBuiltin::red_dead_redemption_tinyfunc_823da230,
    scanbytes<0x81, 0x6d, 0x0, 0x0, 0x39, 0x40, 0x0, 0x78, 0x7c, 0x64, 0x1b,
              0x78, 0x38, 0xc0, 0x0, 0x0, 0x38, 0xa0, 0x0, 0x10, 0x7c, 0x6a,
              0x58, 0x2e, 0x81, 0x23, 0x0, 0x0, 0x81, 0x9, 0x0, 0x8, 0x7d, 0x9,
              0x3, 0xa6, 0x4e, 0x80, 0x4, 0x20>>;

using match_red_dead_redemption_tinyfunc_823da290 = ppcbuiltin_matcher_t<
    PPCBuiltin::red_dead_redemption_tinyfunc_823da290,
    scanbytes<0x7c, 0x6b, 0x1b, 0x78, 0x7c, 0x85, 0x23, 0x78, 0x7f, 0x3, 0x20,
              0x40, 0x41, 0x99, 0x0, 0x8, 0x7c, 0x8b, 0x23, 0x78, 0x81, 0x4d,
              0x0, 0x0, 0x39, 0x20, 0x0, 0x78, 0x38, 0xc0, 0x0, 0x0, 0x7d, 0x64,
              0x5b, 0x78, 0x7c, 0x69, 0x50, 0x2e, 0x81, 0x3, 0x0, 0x0, 0x80,
              0xe8, 0x0, 0x8, 0x7c, 0xe9, 0x3, 0xa6, 0x4e, 0x80, 0x4, 0x20>>;

using match_red_dead_redemption_tinyfunc_823da258 = ppcbuiltin_matcher_t<
    PPCBuiltin::red_dead_redemption_tinyfunc_823da258,
    scanbytes<0x7c, 0x6b, 0x1b, 0x78, 0x7c, 0x85, 0x23, 0x78, 0x7f, 0x3, 0x20,
              0x40, 0x41, 0x99, 0x0, 0x8, 0x7c, 0x8b, 0x23, 0x78, 0x81, 0x4d,
              0x0, 0x0, 0x39, 0x20, 0x0, 0x78, 0x38, 0xc0, 0x0, 0x0, 0x7d, 0x64,
              0x5b, 0x78, 0x7c, 0x69, 0x50, 0x2e, 0x81, 0x3, 0x0, 0x0, 0x80,
              0xe8, 0x0, 0x8, 0x7c, 0xe9, 0x3, 0xa6, 0x4e, 0x80, 0x4, 0x20>>;

using rdr_d3d_func_subfunc = scanbytes<0x81, 0x6d, 0x1, 0x0, 0x80, 0x6b, 0x1,
                                       0x4c, 0x4e, 0x80, 0x0, 0x20>;

/*
    END RDR SPECIFIC
*/

using match_u64tod = ppcbuiltin_matcher_t<
    PPCBuiltin::uint64_to_double_variant1,
    scanbytes<0x7c, 0x65, 0x0, 0x74, 0x7c, 0x63, 0x28, 0x36, 0x2c, 0x23, 0x0,
              0x0, 0x41, 0x82, 0x0, 0x10, 0x20, 0xa5, 0x4, 0x3e, 0x78, 0x63,
              0xab, 0x2, 0x78, 0xa3, 0xa0, 0x4e, 0xf8, 0x61, 0xff, 0xf8, 0xc8,
              0x21, 0xff, 0xf8, 0x4e, 0x80, 0x0, 0x20>>;

using match_red_dead_redemption_freqcall_824EAF38 = ppcbuiltin_matcher_t<
    PPCBuiltin::red_dead_redemption_freqcall_824EAF38,
    scanbytes<
        0x89, 0x63, 0x0, 0x1, 0x7c, 0x68, 0x1b, 0x78, 0x89, 0x43, 0x0, 0x0,
        0x7c, 0xeb, 0x52, 0x14, 0x81, 0x63, 0x0, 0x8, 0x7f, 0xb, 0x38, 0x0,
        0x40, 0x98, 0x0, 0x4c, 0x55, 0x6a, 0x8, 0x3c, 0x7d, 0x4b, 0x52, 0x14,
        0x55, 0x4a, 0x10, 0x3a, 0x7d, 0x4a, 0x1a, 0x14, 0x81, 0x2a, 0x0, 0x10,
        0x7f, 0x4, 0x48, 0x40, 0x41, 0x98, 0x0, 0x18, 0x81, 0x4a, 0x0, 0x18,
        0x7d, 0x4a, 0x4a, 0x14, 0x7f, 0x4, 0x50, 0x40, 0x39, 0x40, 0x0, 0x1,
        0x41, 0x98, 0x0, 0x8, 0x39, 0x40, 0x0, 0x0, 0x55, 0x4a, 0x6, 0x3e, 0x2b,
        0xa, 0x0, 0x0, 0x41, 0x9a, 0x0, 0xc, 0x7d, 0x63, 0x5b, 0x78, 0x4e, 0x80,
        0x0, 0x20, 0x38, 0x60, 0x0, 0x0, 0x2f, 0x7, 0x0, 0x0, 0x40, 0x99, 0x0,
        0x48, 0x39, 0x48, 0x0, 0x10, 0x81, 0x6a, 0x0, 0x0, 0x7f, 0x4, 0x58,
        0x40, 0x41, 0x98, 0x0, 0x18, 0x81, 0x2a, 0x0, 0x8, 0x7d, 0x69, 0x5a,
        0x14, 0x7f, 0x4, 0x58, 0x40, 0x39, 0x60, 0x0, 0x1, 0x41, 0x98, 0x0, 0x8,
        0x39, 0x60, 0x0, 0x0, 0x55, 0x6b, 0x6, 0x3e, 0x2b, 0xb, 0x0, 0x0, 0x40,
        0x9a, 0x0, 0x1c, 0x38, 0x63, 0x0, 0x1, 0x39, 0x4a, 0x0, 0xc, 0x7f, 0x3,
        0x38, 0x0, 0x41, 0x98, 0xff, 0xc4, 0x38, 0x60, 0xff, 0xff, 0x4e, 0x80,
        0x0, 0x20, 0x90, 0x68, 0x0, 0x8, 0x4e, 0x80, 0x0, 0x20>>;

using match_red_dead_tinyfunc_calledbillions = ppcbuiltin_matcher_t<
    PPCBuiltin::red_dead_redemption_tinyfunc_calledbillions,
    scanbytes<0x81, 0x6d, 0x1, 0x0, 0x80, 0x6b, 0x1, 0x4c, 0x4e, 0x80, 0x0,
              0x20>>;

using match_red_dead_redemption_freqcall_824EB0C8 = ppcbuiltin_matcher_t<
    PPCBuiltin::red_dead_redemption_freqcall_824EB0C8,
    scanbytes<0x7d, 0x88, 0x2, 0xa6, 0x91, 0x81, 0xff, 0xf8, 0xfb, 0xc1, 0xff,
              0xe8, 0xfb, 0xe1, 0xff, 0xf0, 0x94, 0x21, 0xff, 0x90, 0x7c, 0x7f,
              0x1b, 0x78, 0x80, 0x63, 0x0, 0x0, 0x7c, 0x9e, 0x23, 0x78>,

    // 0x4b,0xff,0xfe,0x51,
    blmatch<match_red_dead_redemption_freqcall_824EAF38>,
    scanbytes<
        0x2f, 0x3, 0xff, 0xff, 0x41, 0x9a, 0x0, 0x28, 0x54, 0x6b, 0x8, 0x3c,
        0x81, 0x5f, 0x0, 0x0, 0x7d, 0x63, 0x5a, 0x14, 0x55, 0x6b, 0x10, 0x3a,
        0x7d, 0x6b, 0x52, 0x14, 0x81, 0x4b, 0x0, 0x14, 0x81, 0x2b, 0x0, 0x10,
        0x7c, 0x69, 0x50, 0x50, 0x48, 0x0, 0x0, 0x2c, 0x81, 0x6d, 0x0, 0x0,
        0x39, 0x40, 0x0, 0xf8, 0x7d, 0x2a, 0x58, 0x2e, 0x89, 0x9, 0x0, 0xc,
        0x2b, 0x8, 0x0, 0x0, 0x40, 0x9a, 0x0, 0x10, 0x7f, 0xc4, 0xf3, 0x78,
        0x7f, 0xe3, 0xfb, 0x78, 0x48, 0x33, 0x87, 0xb1, 0x38, 0x60, 0x0, 0x0,
        0x38, 0x21, 0x0, 0x70, 0x81, 0x81, 0xff, 0xf8, 0x7d, 0x88, 0x3, 0xa6,
        0xeb, 0xc1, 0xff, 0xe8, 0xeb, 0xe1, 0xff, 0xf0, 0x4e, 0x80, 0x0, 0x20,
        0x7d, 0x88, 0x2, 0xa6, 0x91, 0x81, 0xff, 0xf8, 0xfb, 0xc1, 0xff, 0xe8,
        0xfb, 0xe1, 0xff, 0xf0, 0x94, 0x21, 0xff, 0x90, 0x7c, 0x7f, 0x1b, 0x78,
        0x80, 0x63, 0x0, 0x0, 0x7c, 0x9e, 0x23, 0x78, 0x4b, 0xff, 0xfe, 0x51,
        0x2f, 0x3, 0xff, 0xff, 0x41, 0x9a, 0x0, 0x28, 0x54, 0x6b, 0x8, 0x3c,
        0x81, 0x5f, 0x0, 0x0, 0x7d, 0x63, 0x5a, 0x14, 0x55, 0x6b, 0x10, 0x3a,
        0x7d, 0x6b, 0x52, 0x14, 0x81, 0x4b, 0x0, 0x14, 0x81, 0x2b, 0x0, 0x10,
        0x7c, 0x69, 0x50, 0x50, 0x48, 0x0, 0x0, 0x2c, 0x81, 0x6d, 0x0, 0x0,
        0x39, 0x40, 0x0, 0xf8, 0x7d, 0x2a, 0x58, 0x2e, 0x89, 0x9, 0x0, 0xc,
        0x2b, 0x8, 0x0, 0x0,

        0x40, 0x9a, 0x0, 0x10, 0x7f, 0xc4, 0xf3, 0x78, 0x7f, 0xe3, 0xfb, 0x78>,

    // calling their error handler
    // skip for now
    // todo: do partial blmatch w/ string comparison to 100% verify
    // 0x48,0x33,0x87,0xb1,
    skipbytes<4>,
    scanbytes<0x38, 0x60, 0x0, 0x0, 0x38, 0x21, 0x0, 0x70, 0x81, 0x81, 0xff,
              0xf8, 0x7d, 0x88, 0x3, 0xa6, 0xeb, 0xc1, 0xff, 0xe8, 0xeb, 0xe1,
              0xff, 0xf0, 0x4e, 0x80, 0x0, 0x20>>;

using match_wcslen_variant1 = ppcbuiltin_matcher_t<
    PPCBuiltin::wcslen_variant1,
    scanbytes<0x7c, 0x6b, 0x1b, 0x78, 0xa1, 0x4b, 0x0, 0x0, 0x39, 0x6b, 0x0,
              0x2, 0x28, 0xa, 0x0, 0x0, 0x40, 0x82, 0xff, 0xf4, 0x7d, 0x63,
              0x58, 0x50, 0x7d, 0x6b, 0xe, 0x70, 0x38, 0x6b, 0xff, 0xff, 0x4e,
              0x80, 0x0, 0x20>>;

using match_strcmpi_variant1 = ppcbuiltin_matcher_t<
    PPCBuiltin::strcmpi_variant1,
    scanbytes<0x39, 0x23, 0xff, 0xff, 0x38, 0x84, 0xff, 0xff, 0x8c, 0xc4, 0x0,
              0x1, 0x8c, 0xa9, 0x0, 0x1, 0x2f, 0x86, 0x0, 0x0, 0x7c, 0x66, 0x28,
              0x51, 0x41, 0x9e, 0x0, 0x38, 0x41, 0x82, 0xff, 0xec, 0x2e, 0x86,
              0x0, 0x41, 0x2f, 0x6, 0x0, 0x5a, 0x41, 0x94, 0x0, 0xc, 0x41, 0x99,
              0x0, 0x8, 0x60, 0xc6, 0x0, 0x20, 0x2c, 0x5, 0x0, 0x41, 0x2c, 0x85,
              0x0, 0x5a, 0x41, 0x80, 0x0, 0xc, 0x41, 0x85, 0x0, 0x8, 0x60, 0xa5,
              0x0, 0x20, 0x7c, 0x66, 0x28, 0x51, 0x41, 0x82, 0xff, 0xbc, 0x4e,
              0x80, 0x0, 0x20>>;

using match_get_exp_variant1 = ppcbuiltin_matcher_t<
    PPCBuiltin::get_exp_variant1,
    scanbytes<0xd8, 0x21, 0x0, 0x10, 0xa1, 0x61, 0x0, 0x10, 0x55, 0x6b, 0xe5,
              0x7e, 0x39, 0x6b, 0xfc, 0x2, 0x7d, 0x63, 0x7, 0x34, 0x4e, 0x80,
              0x0, 0x20>>;

using match_set_exp_variant1 = ppcbuiltin_matcher_t<
    PPCBuiltin::set_exp_variant1,
    scanbytes<0xd8, 0x21, 0x0, 0x10, 0x39, 0x64, 0x3, 0xfe, 0xd8, 0x21, 0xff,
              0xf0, 0x55, 0x6b, 0x20, 0x36, 0xa1, 0x41, 0x0, 0x10, 0x71, 0x4a,
              0x80, 0xf, 0x7d, 0x6b, 0x53, 0x78, 0xb1, 0x61, 0xff, 0xf0, 0xc8,
              0x21, 0xff, 0xf0, 0x4e, 0x80, 0x0, 0x20>>;

using match_set_exp_variant2 = ppcbuiltin_matcher_t<
    PPCBuiltin::set_exp_variant1,
    scanbytes<0xd8, 0x21, 0x0, 0x10, 0xa1, 0x61, 0x0, 0x10, 0xd8, 0x21, 0xff,
              0xf0, 0x39, 0x44, 0x3, 0xfe, 0x71, 0x6b, 0x80, 0xf, 0x55, 0x4a,
              0x20, 0x36, 0x7d, 0x4b, 0x5b, 0x78, 0xb1, 0x61, 0xff, 0xf0, 0xc8,
              0x21, 0xff, 0xf0, 0x4e, 0x80, 0x0, 0x20>>;
using match_get_exp_variant2 = ppcbuiltin_matcher_t<
    PPCBuiltin::get_exp_variant1,
    scanbytes<0xd8, 0x21, 0x0, 0x10, 0xa1, 0x61, 0x0, 0x10, 0x55, 0x6b, 0xe5,
              0x7e, 0x39, 0x6b, 0xfc, 0x2, 0x7d, 0x63, 0x7, 0x34, 0x4e, 0x80,
              0x0, 0x20>>;

using match_strchr = ppcbuiltin_matcher_t<
    PPCBuiltin::strchr_variant1,
    scanbytes<0x88, 0xc3, 0x0, 0x0, 0x2c, 0x4, 0x0, 0x0, 0x41, 0x82, 0x0, 0x1c,
              0x2c, 0x86, 0x0, 0x0, 0x7c, 0x6, 0x20, 0x0, 0x41, 0x86, 0x0, 0x20,
              0x41, 0x82, 0x0, 0x20, 0x8c, 0xc3, 0x0, 0x1, 0x4b, 0xff, 0xff,
              0xec, 0x2c, 0x6, 0x0, 0x0, 0x41, 0x82, 0x0, 0x10, 0x8c, 0xc3, 0x0,
              0x1, 0x4b, 0xff, 0xff, 0xf4, 0x38, 0x60, 0x0, 0x0, 0x4e, 0x80,
              0x0, 0x20>>;

using match_flush_cached_mem_d3dlib = ppcbuiltin_matcher_t<
    PPCBuiltin::flush_cached_mem_d3dlib,
    scanbytes<
        0x3d, 0x60, 0x7f, 0x10, 0x7f, 0x3, 0x58, 0x40, 0x41, 0x98, 0x0, 0x10,
        0x3d, 0x60, 0x87, 0x0, 0x7f, 0x3, 0x58, 0x40, 0x4d, 0x98, 0x0, 0x20,
        0x39, 0x44, 0x0, 0x7f, 0x54, 0x6b, 0x0, 0x30, 0x55, 0x49, 0x0, 0x30,
        0x7d, 0x6a, 0x5b, 0x78, 0x7d, 0x6b, 0x48, 0x50, 0x7d, 0x6b, 0x3e, 0x70,
        0x7d, 0x6b, 0x1, 0x94, 0x55, 0x69, 0xe8, 0xff, 0x55, 0x6b, 0x7, 0x7e,
        0x41, 0x82, 0x0, 0x4c, 0x7d, 0x29, 0x3, 0xa6, 0x7c, 0x0, 0x50, 0xac,
        0x39, 0x20, 0x0, 0x80, 0x7c, 0x9, 0x50, 0xac, 0x39, 0x20, 0x1, 0x0,
        0x7c, 0x9, 0x50, 0xac, 0x39, 0x20, 0x1, 0x80, 0x7c, 0x9, 0x50, 0xac,
        0x39, 0x20, 0x2, 0x0, 0x7c, 0x9, 0x50, 0xac, 0x39, 0x20, 0x2, 0x80,
        0x7c, 0x9, 0x50, 0xac, 0x39, 0x20, 0x3, 0x0, 0x7c, 0x9, 0x50, 0xac,
        0x39, 0x20, 0x3, 0x80, 0x7c, 0x9, 0x50, 0xac, 0x39, 0x4a, 0x4, 0x0,
        0x42, 0x0, 0xff, 0xc0, 0x2b, 0xb, 0x0, 0x0, 0x41, 0x9a, 0x0, 0x14, 0x7d,
        0x69, 0x3, 0xa6, 0x7c, 0x0, 0x50, 0xac, 0x39, 0x4a, 0x0, 0x80, 0x42,
        0x0, 0xff, 0xf8, 0x7c, 0x0, 0x4, 0xac, 0x4e, 0x80, 0x0, 0x20>>;
using match_flush_cached_mem_d3dlib_variant2 = ppcbuiltin_matcher_t<
    PPCBuiltin::flush_cached_mem_d3dlib,
    scanbytes<
        0x3d, 0x60, 0x7, 0xef, 0x3d, 0x43, 0x80, 0xf0, 0x61, 0x6b, 0xff, 0xff,
        0x7f, 0xa, 0x58, 0x40, 0x4c, 0x99, 0x0, 0x20, 0x39, 0x44, 0x0, 0x7f,
        0x54, 0x6b, 0x0, 0x30, 0x55, 0x4a, 0x0, 0x30, 0x7d, 0x4b, 0x50, 0x50,
        0x7d, 0x4a, 0x3e, 0x70, 0x7d, 0x4a, 0x1, 0x94, 0x55, 0x49, 0xe8, 0xff,
        0x55, 0x4a, 0x7, 0x7e, 0x41, 0x82, 0x0, 0x4c, 0x7c, 0x0, 0x58, 0xac,
        0x39, 0x0, 0x0, 0x80, 0x7c, 0x8, 0x58, 0xac, 0x39, 0x0, 0x1, 0x0, 0x7c,
        0x8, 0x58, 0xac, 0x39, 0x0, 0x1, 0x80, 0x7c, 0x8, 0x58, 0xac, 0x39, 0x0,
        0x2, 0x0, 0x7c, 0x8, 0x58, 0xac, 0x39, 0x0, 0x2, 0x80, 0x7c, 0x8, 0x58,
        0xac, 0x39, 0x0, 0x3, 0x0, 0x7c, 0x8, 0x58, 0xac, 0x39, 0x0, 0x3, 0x80,
        0x7c, 0x8, 0x58, 0xac, 0x35, 0x29, 0xff, 0xff, 0x39, 0x6b, 0x4, 0x0,
        0x40, 0x82, 0xff, 0xbc, 0x2b, 0xa, 0x0, 0x0, 0x41, 0x9a, 0x0, 0x14,
        0x7c, 0x0, 0x58, 0xac, 0x35, 0x4a, 0xff, 0xff, 0x39, 0x6b, 0x0, 0x80,
        0x40, 0x82, 0xff, 0xf4, 0x7c, 0x0, 0x4, 0xac, 0x4e, 0x80, 0x0, 0x20>>;

using memcpy_cached_dest_d3d = ppcbuiltin_matcher_t<
    PPCBuiltin::Memcpy_standard_variant1,
    scanbytes<

        0x7c, 0x6a, 0x1b, 0x78, 0x7c, 0x8b, 0x23, 0x78, 0x54, 0x89, 0x7, 0xbf,
        0x48, 0x0, 0x0, 0x24, 0x2b, 0x5, 0x0, 0x1, 0x41, 0x98, 0x0, 0x24, 0x89,
        0x2b, 0x0, 0x0, 0x39, 0x6b, 0x0, 0x1, 0x38, 0xa5, 0xff, 0xff, 0x55,
        0x68, 0x7, 0xbf, 0x99, 0x2a, 0x0, 0x0, 0x39, 0x4a, 0x0, 0x1, 0x91, 0x41,
        0xff, 0xf0, 0x40, 0x82, 0xff, 0xdc, 0x55, 0x69, 0x7, 0x7f, 0x41, 0x82,
        0x0, 0x2c, 0x2b, 0x5, 0x0, 0x4, 0x41, 0x98, 0x0, 0x24, 0x81, 0x2b, 0x0,
        0x0, 0x39, 0x6b, 0x0, 0x4, 0x38, 0xa5, 0xff, 0xfc, 0x55, 0x68, 0x7,
        0x7f, 0x91, 0x2a, 0x0, 0x0, 0x39, 0x4a, 0x0, 0x4, 0x91, 0x41, 0xff,
        0xf0, 0x40, 0x82, 0xff, 0xdc, 0x55, 0x69, 0x7, 0x3f, 0x41, 0x82, 0x0,
        0x2c, 0x2b, 0x5, 0x0, 0x8, 0x41, 0x98, 0x0, 0x24, 0xe9, 0x2b, 0x0, 0x0,
        0x39, 0x6b, 0x0, 0x8, 0x38, 0xa5, 0xff, 0xf8, 0x55, 0x68, 0x7, 0x3f,
        0xf9, 0x2a, 0x0, 0x0, 0x39, 0x4a, 0x0, 0x8, 0x91, 0x41, 0xff, 0xf0,
        0x40, 0x82, 0xff, 0xdc, 0x39, 0xa, 0x0, 0xf, 0x39, 0x20, 0x0, 0x10,
        0x48, 0x0, 0x0, 0x2c, 0x2b, 0x5, 0x0, 0x10, 0x41, 0x98, 0x0, 0xcc, 0x13,
        0xe0, 0x58, 0xc7, 0x39, 0x8, 0x0, 0x10, 0x13, 0xe0, 0x55, 0x7, 0x39,
        0x6b, 0x0, 0x10, 0x13, 0xea, 0x4d, 0x47, 0x39, 0x4a, 0x0, 0x10, 0x38,
        0xa5, 0xff, 0xf0, 0x91, 0x41, 0xff, 0xf0, 0x55, 0x7, 0x6, 0x7e, 0x2b,
        0x7, 0x0, 0x10, 0x40, 0x98, 0xff, 0xd0, 0x48, 0x0, 0x0, 0x9c, 0x39, 0x0,
        0x0, 0xf, 0x7c, 0x28, 0x57, 0xec, 0x38, 0xc0, 0x0, 0x2, 0x81, 0x41,
        0xff, 0xf0, 0x39, 0xb, 0x0, 0x20, 0x38, 0xea, 0x0, 0x20, 0x7c, 0xc9,
        0x3, 0xa6, 0x13, 0xc9, 0x5c, 0x47, 0x38, 0xc8, 0xff, 0xf0, 0x13, 0xe0,
        0x5c, 0x7, 0x38, 0x88, 0x0, 0x10, 0x17, 0xff, 0xf2, 0xf5, 0x13, 0xa9,
        0x44, 0x47, 0x13, 0xc0, 0x44, 0x7, 0x38, 0x67, 0xff, 0xf0, 0x17, 0xde,
        0xea, 0xf5, 0x39, 0x6b, 0x0, 0x40, 0x13, 0x80, 0x34, 0x7, 0x39, 0x8,
        0x0, 0x40, 0x13, 0xa9, 0x34, 0x47, 0x38, 0xc7, 0x0, 0x10, 0x17, 0xbc,
        0xea, 0xf5, 0x13, 0x80, 0x24, 0x7, 0x13, 0x69, 0x24, 0x47, 0x38, 0xa5,
        0xff, 0xc0, 0x13, 0xe0, 0x55, 0x7, 0x17, 0x9c, 0xda, 0xf5, 0x13, 0xea,
        0x4d, 0x47, 0x39, 0x4a, 0x0, 0x40, 0x13, 0xa0, 0x1d, 0x7, 0x13, 0xa3,
        0x4d, 0x47, 0x13, 0xc0, 0x3d, 0x7, 0x13, 0xc7, 0x4d, 0x47, 0x38, 0xe7,
        0x0, 0x40, 0x13, 0x80, 0x35, 0x7, 0x13, 0x86, 0x4d, 0x47, 0x42, 0x0,
        0xff, 0x8c, 0x91, 0x41, 0xff, 0xf0, 0x2b, 0x5, 0x0, 0x8f, 0x40, 0x98,
        0xff, 0x64, 0x2b, 0x5, 0x0, 0x10, 0x41, 0x98, 0x0, 0x28, 0x54, 0xa8,
        0xe1, 0x3e, 0x7d, 0x9, 0x3, 0xa6, 0x13, 0xe0, 0x58, 0xc7, 0x39, 0x6b,
        0x0, 0x10, 0x13, 0xe0, 0x55, 0x7, 0x38, 0xa5, 0xff, 0xf0, 0x13, 0xea,
        0x4d, 0x47, 0x39, 0x4a, 0x0, 0x10, 0x42, 0x0, 0xff, 0xe8, 0x55, 0x69,
        0x7, 0x3f, 0x41, 0x82, 0x0, 0x28, 0x2b, 0x5, 0x0, 0x8, 0x41, 0x98, 0x0,
        0x20, 0xe9, 0x2b, 0x0, 0x0, 0x39, 0x6b, 0x0, 0x8, 0x38, 0xa5, 0xff,
        0xf8, 0x55, 0x68, 0x7, 0x3f, 0xf9, 0x2a, 0x0, 0x0, 0x39, 0x4a, 0x0, 0x8,
        0x40, 0x82, 0xff, 0xe0, 0x55, 0x69, 0x7, 0x7f, 0x41, 0x82, 0x0, 0x28,
        0x2b, 0x5, 0x0, 0x4, 0x41, 0x98, 0x0, 0x20, 0x81, 0x2b, 0x0, 0x0, 0x39,
        0x6b, 0x0, 0x4, 0x38, 0xa5, 0xff, 0xfc, 0x55, 0x68, 0x7, 0x7f, 0x91,
        0x2a, 0x0, 0x0, 0x39, 0x4a, 0x0, 0x4, 0x40, 0x82, 0xff, 0xe0, 0x55,
        0x69, 0x7, 0xbf, 0x4d, 0x82, 0x0, 0x20, 0x2b, 0x5, 0x0, 0x1, 0x4d, 0x98,
        0x0, 0x20, 0x89, 0x2b, 0x0, 0x0, 0x39, 0x6b, 0x0, 0x1, 0x38, 0xa5, 0xff,
        0xff, 0x55, 0x68, 0x7, 0xbf, 0x99, 0x2a, 0x0, 0x0, 0x39, 0x4a, 0x0, 0x1,
        0x40, 0x82, 0xff, 0xe0, 0x4e, 0x80, 0x0, 0x20>>;

using match_yet_another_vector_memset = ppcbuiltin_matcher_t<
    PPCBuiltin::Memset, scanbytes<0x7d, 0x88, 0x2, 0xa6>,
    blmatch<match_savegplr29>,
    scanbytes<
        0x7c, 0x6a, 0x1b, 0x78, 0x2b, 0x5, 0x0, 0x10, 0x40, 0x98, 0x0, 0x2c,
        0x2b, 0x5, 0x0, 0x0, 0x41, 0x9a, 0x1, 0x88, 0x7c, 0x8a, 0x7, 0x74, 0x39,
        0x63, 0xff, 0xff, 0x28, 0x5, 0x0, 0x0, 0x41, 0x82, 0x1, 0x78, 0x7c,
        0xa9, 0x3, 0xa6, 0x9d, 0x4b, 0x0, 0x1, 0x42, 0x0, 0xff, 0xfc, 0x48, 0x0,
        0x1, 0x68, 0x7d, 0x63, 0x0, 0xd0, 0x10, 0x4, 0x3, 0xc, 0x7d, 0xa0, 0x20,
        0xc, 0x7d, 0x69, 0x26, 0x70, 0x7c, 0x88, 0x26, 0x70, 0x55, 0x6b, 0x7,
        0x3f, 0x7d, 0x80, 0x40, 0xc, 0x55, 0x29, 0x7, 0x7e, 0x10, 0xc, 0x1, 0x4,
        0x10, 0xd, 0x4, 0x84, 0x10, 0x0, 0x2, 0xc, 0x41, 0x82, 0x0, 0x10, 0x7c,
        0x0, 0x1d, 0xe, 0x7c, 0xab, 0x28, 0x50, 0x7d, 0x4b, 0x1a, 0x14, 0x54,
        0xab, 0xe1, 0x3e, 0x7f, 0xb, 0x48, 0x40, 0x40, 0x98, 0x0, 0x8, 0x7d,
        0x69, 0x5b, 0x78, 0x3d, 0x60, 0x82, 0xf4, 0x2b, 0x9, 0x0, 0x0, 0x80,
        0xcb, 0x7e, 0x60, 0x41, 0x9a, 0x0, 0x14, 0x7d, 0x29, 0x3, 0xa6, 0x10,
        0x0, 0x51, 0xc3, 0x7d, 0x46, 0x52, 0x14, 0x42, 0x0, 0xff, 0xf8, 0x55,
        0x2b, 0x20, 0x36, 0x54, 0x89, 0x6, 0x3f, 0x7c, 0xeb, 0x28, 0x50, 0x54,
        0xeb, 0xc9, 0xfe, 0x40, 0x82, 0x0, 0x20, 0x2b, 0xb, 0x0, 0x0, 0x41,
        0x9a, 0x0, 0xb4, 0x7d, 0x69, 0x3, 0xa6, 0x7c, 0x20, 0x57, 0xec, 0x39,
        0x4a, 0x0, 0x80, 0x42, 0x0, 0xff, 0xf8, 0x48, 0x0, 0x0, 0xa0, 0x2b, 0xb,
        0x0, 0x4, 0x7d, 0x68, 0x5b, 0x78, 0x41, 0x98, 0x0, 0x8, 0x39, 0x0, 0x0,
        0x4, 0x39, 0x20, 0x0, 0x0, 0x2b, 0x8, 0x0, 0x0, 0x41, 0x9a, 0x0, 0x18,
        0x7d, 0x9, 0x3, 0xa6, 0x55, 0x28, 0x38, 0x30, 0x7c, 0x28, 0x57, 0xec,
        0x39, 0x29, 0x0, 0x1, 0x42, 0x0, 0xff, 0xf4, 0x39, 0x20, 0x0, 0x0, 0x2b,
        0xb, 0x0, 0x0, 0x41, 0x9a, 0x0, 0x64, 0x7d, 0x69, 0x3, 0xa6, 0x39, 0x9,
        0x0, 0x4, 0x7f, 0x8, 0x58, 0x40, 0x40, 0x98, 0x0, 0xc, 0x39, 0x0, 0x2,
        0x0, 0x7c, 0x28, 0x57, 0xec, 0x39, 0x0, 0x0, 0x10, 0x10, 0x0, 0x51,
        0xc3, 0x38, 0xa0, 0x0, 0x20, 0x38, 0x80, 0x0, 0x30, 0x3b, 0xe0, 0x0,
        0x40, 0x3b, 0xc0, 0x0, 0x50, 0x10, 0xa, 0x41, 0xc3, 0x3b, 0xa0, 0x0,
        0x60, 0x39, 0x0, 0x0, 0x70, 0x10, 0xa, 0x29, 0xc3, 0x10, 0xa, 0x21,
        0xc3, 0x39, 0x29, 0x0, 0x1, 0x10, 0xa, 0xf9, 0xc3, 0x10, 0xa, 0xf1,
        0xc3, 0x10, 0xa, 0xe9, 0xc3, 0x10, 0xa, 0x41, 0xc3, 0x39, 0x4a, 0x0,
        0x80, 0x42, 0x0, 0xff, 0xa8, 0x55, 0x6b, 0x38, 0x30, 0x7d, 0x6b, 0x38,
        0x50, 0x2b, 0xb, 0x0, 0x10, 0x41, 0x98, 0x0, 0x1c, 0x55, 0x69, 0xe1,
        0x3e, 0x7d, 0x29, 0x3, 0xa6, 0x10, 0x0, 0x51, 0xc3, 0x7d, 0x46, 0x52,
        0x14, 0x39, 0x6b, 0xff, 0xf0, 0x42, 0x0, 0xff, 0xf4, 0x7c, 0xa, 0x5d,
        0x4e>,
    bmatch<match_restgplr29>>;
using match_allocator_subfn = ppcbuiltin_matcher_t<
    PPCBuiltin::freqcall_c_allocator_,
    scanbytes<0x81, 0x43, 0x0, 0x8, 0x7c, 0x6b, 0x1b, 0x78, 0x38, 0x60, 0x0,
              0x0, 0x2b, 0xa, 0x0, 0x0, 0x4d, 0x9a, 0x0, 0x20, 0x7d, 0xa, 0x0,
              0xd0, 0x80, 0xeb, 0x0, 0x4, 0x3d, 0x80, 0xf0, 0xf0, 0x81, 0x2b,
              0x0, 0x0, 0x7d, 0x8, 0x50, 0x38, 0x61, 0x8c, 0xf0, 0xf0, 0x55,
              0x6, 0x0, 0x1e, 0x55, 0x5, 0x0, 0x2e, 0x30, 0x86, 0xff, 0xff,
              0x54, 0xa5, 0x4, 0xe, 0x7c, 0xc4, 0x31, 0x10, 0x30, 0x85, 0xff,
              0xff, 0x7d, 0x3, 0x60, 0x38, 0x3d, 0x80, 0xcc, 0xcc, 0x7c, 0xa4,
              0x29, 0x10, 0x54, 0xc6, 0x8, 0x3c, 0x30, 0x83, 0xff, 0xff, 0x61,
              0x8c, 0xcc, 0xcc, 0x7c, 0xc6, 0x2b, 0x78, 0x7c, 0xa4, 0x19, 0x10,
              0x7d, 0x4, 0x60, 0x38, 0x54, 0xc6, 0x8, 0x3c, 0x3d, 0x80, 0xaa,
              0xaa, 0x30, 0x64, 0xff, 0xff, 0x7c, 0xc6, 0x2b, 0x78, 0x61, 0x8c,
              0xaa, 0xaa, 0x7c, 0xa3, 0x21, 0x10, 0x7d, 0x4, 0x60, 0x38, 0x54,
              0xc6, 0x8, 0x3c, 0x30, 0x64, 0xff, 0xff, 0x7c, 0xc6, 0x2b, 0x78,
              0x7c, 0xa3, 0x21, 0x10, 0x54, 0xc6, 0x8, 0x3c, 0x7d, 0x4a, 0x42,
              0x78, 0x7c, 0xc8, 0x2b, 0x78, 0x91, 0x4b, 0x0, 0x8, 0x7d, 0x68,
              0x39, 0xd6, 0x7c, 0x6b, 0x4a, 0x14, 0x4e, 0x80, 0x0, 0x20>>;

#define RDR_STRHASH_TABLE_BYTES                                               \
  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B,     \
      0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, \
      0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, \
      0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, \
      0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, \
      0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, \
      0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, \
      0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x5B, 0x2F, 0x5D, 0x5E, 0x5F, \
      0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, \
      0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, \
      0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, \
      0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, \
      0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, \
      0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, \
      0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, \
      0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, \
      0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, \
      0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, \
      0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF, 0xE0, 0xE1, 0xE2, 0xE3, \
      0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, \
      0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, \
      0xFC, 0xFD, 0xFE, 0xFF

using match_rdr_hashcode_func = ppcbuiltin_matcher_t<
    PPCBuiltin::rdr_hashcode_function,
    scanbytes<0x7c, 0x6b, 0x1b, 0x78, 0x2b, 0x3, 0x0, 0x0, 0x40, 0x9a, 0x0, 0x8,
              0x4e, 0x80, 0x0, 0x20, 0x89, 0x4b, 0x0, 0x0, 0x7c, 0x83, 0x23,
              0x78, 0x2b, 0xa, 0x0, 0x22, 0x40, 0x9a, 0x0, 0x54, 0x8d, 0x4b,
              0x0, 0x1, 0x7d, 0x48, 0x7, 0x74, 0x2f, 0x8, 0x0, 0x0,

              0x4d, 0x9a, 0x0, 0x20>,
    // 0x3d,0x20,0x82,0x7,
    masked_compare_push<0x3d20 << 16>, masked_compare_push<0x38c9 << 16>,
    lis_sdisp16_addr_memcmp<2, 1, RDR_STRHASH_TABLE_BYTES>,
    scanbytes<
        // 0x38,0xc9,0x5d,0x70,

        0x2f, 0x8, 0x0, 0x22, 0x4d, 0x9a, 0x0, 0x20, 0x55, 0x49, 0x6, 0x3e,
        0x8d, 0x4b, 0x0, 0x1, 0x7d, 0x48, 0x7, 0x74, 0x2f, 0x8, 0x0, 0x0, 0x7d,
        0x29, 0x30, 0xae, 0x7d, 0x29, 0x1a, 0x14, 0x55, 0x27, 0x50, 0x2a, 0x7d,
        0x27, 0x4a, 0x14, 0x55, 0x27, 0xd1, 0xbe, 0x7c, 0xe3, 0x4a, 0x78, 0x40,
        0x9a, 0xff, 0xd0, 0x4e, 0x80, 0x0, 0x20, 0x3d, 0x20, 0x1, 0x1, 0x80,
        0xeb, 0x0, 0x0, 0x3d, 0x80, 0x80, 0x80,

        0x61, 0x28, 0x1, 0x1, 0x61, 0x8c, 0x80, 0x80, 0x7c, 0xc8, 0x38, 0x50>,

    // 0x3d,0x40,0x82,0x7,
    masked_compare_push<0x3d40 << 16>,

    scanbytes<0x7c, 0xc5, 0x60, 0x38>,

    // 0x39,0x4a,0x5d,0x70,
    masked_compare_push<0x394a << 16>,
    lis_sdisp16_addr_memcmp<2, 1, RDR_STRHASH_TABLE_BYTES>,

    scanbytes<
        0x2b, 0x5, 0x0, 0x0, 0x40, 0x9a, 0x0, 0x90, 0x89, 0x2b, 0x0, 0x0, 0x3d,
        0x80, 0x80, 0x80, 0x8c, 0xeb, 0x0, 0x1, 0x61, 0x8c, 0x80, 0x80, 0x7d,
        0x29, 0x50, 0xae, 0x7c, 0xa7, 0x50, 0xae, 0x7d, 0x29, 0x1a, 0x14, 0x8c,
        0xcb, 0x0, 0x1, 0x55, 0x24, 0x50, 0x2a, 0x7d, 0x24, 0x4a, 0x14, 0x8c,
        0x6b, 0x0, 0x1, 0x55, 0x24, 0xd1, 0xbe, 0x7c, 0xc6, 0x50, 0xae, 0x7c,
        0x89, 0x4a, 0x78, 0x7d, 0x25, 0x4a, 0x14, 0x84, 0x8b, 0x0, 0x1, 0x7c,
        0xe3, 0x50, 0xae, 0x55, 0x25, 0x50, 0x2a, 0x7c, 0x68, 0x20, 0x50, 0x7d,
        0x25, 0x4a, 0x14, 0x7c, 0x64, 0x60, 0x38, 0x55, 0x25, 0xd1, 0xbe, 0x2b,
        0x4, 0x0, 0x0, 0x7c, 0xa9, 0x4a, 0x78, 0x7d, 0x26, 0x4a, 0x14, 0x55,
        0x26, 0x50, 0x2a, 0x7d, 0x26, 0x4a, 0x14, 0x55, 0x23, 0xd1, 0xbe, 0x7c,
        0x69, 0x4a, 0x78, 0x7d, 0x27, 0x4a, 0x14, 0x55, 0x27, 0x50, 0x2a, 0x7d,
        0x27, 0x4a, 0x14, 0x55, 0x27, 0xd1, 0xbe, 0x7c, 0xe3, 0x4a, 0x78, 0x41,
        0x9a, 0xff, 0x78, 0x89, 0x2b, 0x0, 0x0, 0x2b, 0x9, 0x0, 0x0, 0x4d, 0x9a,
        0x0, 0x20, 0x55, 0x29, 0x6, 0x3e, 0x7d, 0x9, 0x50, 0xae, 0x8d, 0x2b,
        0x0, 0x1, 0x7d, 0x8, 0x1a, 0x14, 0x2b, 0x9, 0x0, 0x0, 0x55, 0x7, 0x50,
        0x2a, 0x7d, 0x7, 0x42, 0x14, 0x55, 0x5, 0xd1, 0xbe, 0x7c, 0xa3, 0x42,
        0x78, 0x40, 0x9a, 0xff, 0xe0, 0x4e, 0x80, 0x0, 0x20>>;

using match_red_dead_redemption_sub_82EB1110 = ppcbuiltin_matcher_t<
    PPCBuiltin::red_dead_redemption_sub_82EB1110,
    scanbytes<0x81, 0x64, 0x0, 0x0, 0x81, 0x43, 0x0, 0x0, 0x55, 0x69, 0x60,
              0x26, 0x81, 0x3, 0x0, 0x8, 0x38, 0xea, 0xff, 0xff, 0x7d, 0x49,
              0x5a, 0x14, 0x55, 0x46, 0x55, 0xbe, 0x7c, 0xca, 0x52, 0x78, 0x55,
              0x49, 0x20, 0x36, 0x7d, 0x49, 0x52, 0x14, 0x55, 0x45, 0xba, 0x7e,
              0x7c, 0xaa, 0x52, 0x78, 0x55, 0x49, 0x50, 0x2a, 0x7d, 0x49, 0x52,
              0x14, 0x55, 0x44, 0xf0, 0xbe, 0x7c, 0x8a, 0x52, 0x78, 0x55, 0x49,
              0x38, 0x30, 0x7d, 0x49, 0x52, 0x14, 0x55, 0x43, 0xa3, 0x3e, 0x7c,
              0x6a, 0x52, 0x78, 0x7d, 0x49, 0x0, 0x34, 0x55, 0x29, 0xdf, 0xfe,
              0x7c, 0xc9, 0x52, 0x14, 0x7c, 0xc5, 0x38, 0x38, 0x54, 0xa4, 0x18,
              0x38, 0x7d, 0x44, 0x40, 0x2e, 0x2b, 0xa, 0x0, 0x0, 0x41, 0x9a,
              0x0, 0x1c, 0x81, 0x2a, 0x0, 0x0, 0x7f, 0xb, 0x48, 0x40, 0x41,
              0x9a, 0x0, 0x18, 0x81, 0x4a, 0x0, 0x8, 0x2b, 0xa, 0x0, 0x0, 0x40,
              0x9a, 0xff, 0xec, 0x38, 0x60, 0x0, 0x0, 0x4e, 0x80, 0x0, 0x20,
              0x38, 0x6a, 0x0, 0x4, 0x4e, 0x80, 0x0, 0x20>>;
using match_d3d_device_set_pix_shader_constant_fn = ppcbuiltin_matcher_t<
    PPCBuiltin::d3d_device_set_pix_shader_constant_fn,
    scanbytes<
        0x39, 0x44, 0x1, 0x78, 0x7c, 0xab, 0x2b, 0x78, 0x55, 0x4a, 0x20, 0x36,
        0x7c, 0xc9, 0x33, 0x78, 0x7d, 0x4a, 0x1a, 0x14, 0x7c, 0x0, 0x2a, 0x2c,
        0x39, 0x0, 0x0, 0x80, 0x7c, 0x8, 0x2a, 0x2c, 0x38, 0xa0, 0x0, 0x10,
        0x2b, 0x6, 0x0, 0x3, 0x40, 0x99, 0x0, 0x78, 0x39, 0x6, 0xff, 0xfc, 0x38,
        0xc0, 0x0, 0x20, 0x55, 0x8, 0xf0, 0xbe, 0x39, 0x8, 0x0, 0x1, 0x7d, 0x9,
        0x3, 0xa6, 0x39, 0x0, 0x0, 0x30, 0x38, 0x80, 0x1, 0x0, 0x7c, 0x4, 0x5a,
        0x2c, 0x13, 0xc5, 0x5c, 0x47, 0x38, 0x80, 0x0, 0x40, 0x13, 0xe0, 0x5c,
        0x7, 0x39, 0x29, 0xff, 0xfc, 0x17, 0xff, 0xf2, 0xf5, 0x13, 0xa5, 0x5c,
        0x7, 0x13, 0xc6, 0x5c, 0x47, 0x17, 0xdd, 0xf2, 0xf5, 0x13, 0x86, 0x5c,
        0x7, 0x13, 0xa8, 0x5c, 0x47, 0x17, 0xbc, 0xea, 0xf5, 0x13, 0x68, 0x5c,
        0x7, 0x13, 0x84, 0x5c, 0x47, 0x39, 0x6b, 0x0, 0x40, 0x17, 0x9b, 0xe2,
        0xf5, 0x13, 0xe0, 0x51, 0xc7, 0x13, 0xca, 0x29, 0xc7, 0x13, 0xaa, 0x31,
        0xc7, 0x13, 0x8a, 0x41, 0xc7, 0x39, 0x4a, 0x0, 0x40, 0x42, 0x0, 0xff,
        0xa8, 0x2b, 0x9, 0x0, 0x0, 0x41, 0x9a, 0x0, 0x24, 0x7d, 0x29, 0x3, 0xa6,
        0x13, 0xe0, 0x5c, 0x7, 0x13, 0xc5, 0x5c, 0x47, 0x39, 0x6b, 0x0, 0x10,
        0x17, 0xff, 0xf2, 0xf5, 0x13, 0xe0, 0x51, 0xc7, 0x39, 0x4a, 0x0, 0x10,
        0x42, 0x0, 0xff, 0xe8, 0xe9, 0x63, 0x0, 0x8, 0x7c, 0xeb, 0x5b, 0x78,
        0xf9, 0x63, 0x0, 0x8, 0x4e, 0x80, 0x0, 0x20>>;

using match_d3d_device_set_vert_shader_constant_fn = ppcbuiltin_matcher_t<
    PPCBuiltin::d3d_device_set_vert_shader_constant_fn,
    scanbytes<
        0x39, 0x44, 0x0, 0x78, 0x7c, 0xab, 0x2b, 0x78, 0x55, 0x4a, 0x20, 0x36,
        0x7c, 0xc9, 0x33, 0x78, 0x7d, 0x4a, 0x1a, 0x14, 0x7c, 0x0, 0x2a, 0x2c,
        0x39, 0x0, 0x0, 0x80, 0x7c, 0x8, 0x2a, 0x2c, 0x38, 0xa0, 0x0, 0x10,
        0x2b, 0x6, 0x0, 0x3, 0x40, 0x99, 0x0, 0x78, 0x39, 0x6, 0xff, 0xfc, 0x38,
        0xc0, 0x0, 0x20, 0x55, 0x8, 0xf0, 0xbe, 0x39, 0x8, 0x0, 0x1, 0x7d, 0x9,
        0x3, 0xa6, 0x39, 0x0, 0x0, 0x30, 0x38, 0x80, 0x1, 0x0, 0x7c, 0x4, 0x5a,
        0x2c, 0x13, 0xc5, 0x5c, 0x47, 0x38, 0x80, 0x0, 0x40, 0x13, 0xe0, 0x5c,
        0x7, 0x39, 0x29, 0xff, 0xfc, 0x17, 0xff, 0xf2, 0xf5, 0x13, 0xa5, 0x5c,
        0x7, 0x13, 0xc6, 0x5c, 0x47, 0x17, 0xdd, 0xf2, 0xf5, 0x13, 0x86, 0x5c,
        0x7, 0x13, 0xa8, 0x5c, 0x47, 0x17, 0xbc, 0xea, 0xf5, 0x13, 0x68, 0x5c,
        0x7, 0x13, 0x84, 0x5c, 0x47, 0x39, 0x6b, 0x0, 0x40, 0x17, 0x9b, 0xe2,
        0xf5, 0x13, 0xe0, 0x51, 0xc7, 0x13, 0xca, 0x29, 0xc7, 0x13, 0xaa, 0x31,
        0xc7, 0x13, 0x8a, 0x41, 0xc7, 0x39, 0x4a, 0x0, 0x40, 0x42, 0x0, 0xff,
        0xa8, 0x2b, 0x9, 0x0, 0x0, 0x41, 0x9a, 0x0, 0x24, 0x7d, 0x29, 0x3, 0xa6,
        0x13, 0xe0, 0x5c, 0x7, 0x13, 0xc5, 0x5c, 0x47, 0x39, 0x6b, 0x0, 0x10,
        0x17, 0xff, 0xf2, 0xf5, 0x13, 0xe0, 0x51, 0xc7, 0x39, 0x4a, 0x0, 0x10,
        0x42, 0x0, 0xff, 0xe8, 0xe9, 0x63, 0x0, 0x0, 0x7d, 0x6b, 0x3b, 0x78,
        0xf9, 0x63, 0x0, 0x0, 0x4e, 0x80, 0x0, 0x20>>;
//h3 8214D9D0
// recognized this pesky fukka when it showed up in the profiler
using match_d3d_device_set_vert_shader_constant_fn_variant2 = ppcbuiltin_matcher_t<PPCBuiltin::d3d_device_set_vert_shader_constant_fn,
    scanbytes<
0xfb,0xe1,0xff,0xf8,
0x39,0x44,0x0,0x78,
0x7c,0xab,0x2b,0x78,
0x55,0x4a,0x20,0x36,
0x7c,0xc9,0x33,0x78,
0x7d,0x4a,0x1a,0x14,
0x7c,0x0,0x5a,0x2c,
0x39,0x0,0x0,0x80,
0x7c,0x8,0x5a,0x2c,
0x38,0x80,0x0,0x10,
0x2b,0x6,0x0,0x3,
0x40,0x99,0x0,0x78,
0x39,0x6,0xff,0xfc,
0x38,0xa0,0x0,0x20,
0x55,0x8,0xf0,0xbe,
0x38,0xc0,0x0,0x30,
0x39,0x8,0x0,0x1,
0x3b,0xe0,0x1,0x0,
0x7c,0x1f,0x5a,0x2c,
0x3b,0xe0,0x0,0x40,
0x7d,0xa4,0x5c,0x4e,
0x7c,0x0,0x5c,0xe,
0x35,0x8,0xff,0xff,
0x7d,0x84,0x5c,0xe,
0x10,0x0,0x6c,0x84,
0x7d,0x65,0x5c,0x4e,
0x39,0x29,0xff,0xfc,
0x7d,0x45,0x5c,0xe,
0x11,0xac,0x5c,0x84,
0x7d,0x26,0x5c,0x4e,
0x7d,0x6,0x5c,0xe,
0x11,0x8a,0x4c,0x84,
0x7c,0xff,0x5c,0x4e,
0x39,0x6b,0x0,0x40,
0x11,0x68,0x3c,0x84,
0x10,0x0,0x51,0xc3,
0x11,0xaa,0x21,0xc3,
0x11,0x8a,0x29,0xc3,
0x11,0x6a,0x31,0xc3,
0x39,0x4a,0x0,0x40,
0x40,0x82,0xff,0xa4,
0x2b,0x9,0x0,0x0,
0x41,0x9a,0x0,0x2c,
0x7d,0x68,0x5b,0x78,
0x7d,0x66,0x5b,0x78,
0x35,0x29,0xff,0xff,
0x39,0x6b,0x0,0x10,
0x7c,0x0,0x44,0xe,
0x7d,0xa4,0x34,0x4e,
0x10,0x0,0x6c,0x84,
0x10,0x0,0x51,0xc3,
0x39,0x4a,0x0,0x10,
0x40,0x82,0xff,0xdc,
0xe9,0x63,0x0,0x0,
0x7d,0x6b,0x3b,0x78,
0xf9,0x63,0x0,0x0,
0xeb,0xe1,0xff,0xf8,
0x4e,0x80,0x0,0x20>>;

using match_red_dead_redemption_sub_82A565E8 = ppcbuiltin_matcher_t<
    PPCBuiltin::red_dead_redemption_sub_82A565E8,

    scanbytes<0x7d, 0x88, 0x2, 0xa6, 0x91, 0x81, 0xff, 0xf8, 0xfb, 0xc1, 0xff,
              0xe8, 0xfb, 0xe1, 0xff, 0xf0, 0x94, 0x21, 0xff, 0x90, 0x80, 0x63,
              0x0, 0x14, 0x7c, 0x9e, 0x23, 0x78, 0x2b, 0x3, 0x0, 0x0, 0x41,
              0x9a, 0x0, 0x28, 0x81, 0x63, 0x0, 0x0, 0x7f, 0xc4, 0xf3, 0x78,
              0x83, 0xe3, 0x0, 0xc, 0x81, 0x4b, 0x0, 0x10, 0x7d, 0x49, 0x3,
              0xa6, 0x4e, 0x80, 0x4, 0x21, 0x7f, 0xe3, 0xfb, 0x78, 0x2b, 0x1f,
              0x0, 0x0, 0x40, 0x9a, 0xff, 0xe0, 0x38, 0x21, 0x0, 0x70, 0x81,
              0x81, 0xff, 0xf8, 0x7d, 0x88, 0x3, 0xa6, 0xeb, 0xc1, 0xff, 0xe8,
              0xeb, 0xe1, 0xff, 0xf0, 0x4e, 0x80, 0x0, 0x20>>;

using match_bungie_data_iter_func1_reach = ppcbuiltin_matcher_t<
    PPCBuiltin::bungie_data_iter_func1_reach,
    scanbytes<0xfb, 0xe1, 0xff, 0xf8, 0x7c, 0x6a, 0x1b, 0x78, 0x7c, 0x8b, 0x23,
              0x78, 0x38, 0x60, 0xff, 0xff, 0x2f, 0x4, 0x0, 0x0, 0x41, 0x98,
              0x0, 0x64, 0x80, 0xaa, 0x0, 0x38, 0x7f, 0x4, 0x28, 0x0, 0x40,
              0x98, 0x0, 0x58, 0x81, 0x2a, 0x0, 0x20, 0x38, 0xc0, 0x0, 0x1,
              0x81, 0xa, 0x0, 0x48, 0x80, 0xea, 0x0, 0x44, 0x7d, 0x49, 0x21,
              0xd6, 0x7c, 0xa, 0x3a, 0x2c, 0x7d, 0x64, 0x2e, 0x70, 0x55, 0x7f,
              0x6, 0xfe, 0x54, 0x84, 0x10, 0x3a, 0x7c, 0xdf, 0xf8, 0x30, 0x7c,
              0x84, 0x40, 0x2e, 0x7f, 0xe4, 0x20, 0x38, 0x2b, 0x4, 0x0, 0x0,
              0x40, 0x9a, 0x0, 0x1c, 0x39, 0x6b, 0x0, 0x1, 0x7d, 0x4a, 0x4a,
              0x14, 0x7f, 0xb, 0x28, 0x0, 0x41, 0x98, 0xff, 0xd0, 0xeb, 0xe1,
              0xff, 0xf8, 0x4e, 0x80, 0x0, 0x20, 0x7d, 0x63, 0x5b, 0x78, 0xeb,
              0xe1, 0xff, 0xf8, 0x4e, 0x80, 0x0, 0x20>>;

using match_bungie_data_iter_increment_reach = ppcbuiltin_matcher_t<
    PPCBuiltin::bungie_data_iter_increment_reach,
    scanbytes<0x7d, 0x88, 0x2, 0xa6, 0x91, 0x81, 0xff, 0xf8, 0xfb, 0xc1, 0xff,
              0xe8, 0xfb, 0xe1, 0xff, 0xf0, 0x94, 0x21, 0xff, 0x90, 0x81, 0x63,
              0x0, 0x8, 0x7c, 0x7f, 0x1b, 0x78, 0x83, 0xc3, 0x0, 0x0, 0x38,
              0x8b, 0x0, 0x1, 0x7f, 0xc3, 0xf3, 0x78>,
    blmatch<match_bungie_data_iter_func1_reach>,
    scanbytes<0x7c, 0x6b, 0x1b, 0x78, 0x2f, 0x3, 0xff, 0xff, 0x41, 0x9a, 0x0,
              0x2c, 0x81, 0x5e, 0x0, 0x20, 0x81, 0x3e, 0x0, 0x44, 0x7d, 0x4a,
              0x19, 0xd6, 0x90, 0x7f, 0x0, 0x8, 0x7c, 0x6a, 0x4a, 0x14, 0xa1,
              0x23, 0x0, 0x0, 0x55, 0x28, 0x80, 0x3e, 0x7d, 0x7, 0x5b, 0x78,
              0x90, 0xff, 0x0, 0x4, 0x48, 0x0, 0x0, 0x1c, 0x81, 0x7f, 0x0, 0x0,
              0x39, 0x40, 0xff, 0xff, 0x38, 0x60, 0x0, 0x0, 0x81, 0x2b, 0x0,
              0x28, 0x91, 0x5f, 0x0, 0x4, 0x91, 0x3f, 0x0, 0x8, 0x38, 0x21, 0x0,
              0x70, 0x81, 0x81, 0xff, 0xf8, 0x7d, 0x88, 0x3, 0xa6, 0xeb, 0xc1,
              0xff, 0xe8, 0xeb, 0xe1, 0xff, 0xf0, 0x4e, 0x80, 0x0, 0x20>>;
//h3:821B6FA8
using match_popcount_uint32_h3 = ppcbuiltin_matcher_t<PPCBuiltin::popcount_uint32, 
    scanbytes<
0x3d,0x80,0xd5,0x55,
0x54,0x6b,0xf8,0x7e,
0x61,0x8c,0x55,0x55,
0x7d,0x6b,0x60,0x38,
0x3d,0x80,0x55,0x55,
0x61,0x8c,0x55,0x55,
0x7c,0x6a,0x60,0x38,
0x3d,0x80,0xf3,0x33,
0x7d,0x6b,0x52,0x14,
0x61,0x8c,0x33,0x33,
0x55,0x6a,0xf0,0xbe,
0x7d,0x4a,0x60,0x38,
0x3d,0x80,0x33,0x33,
0x61,0x8c,0x33,0x33,
0x7d,0x6b,0x60,0x38,
0x3d,0x80,0xff,0xf,
0x7d,0x6a,0x5a,0x14,
0x61,0x8c,0xf,0xf,
0x55,0x6a,0xe1,0x3e,
0x7d,0x4a,0x60,0x38,
0x3d,0x80,0xf,0xf,
0x61,0x8c,0xf,0xf,
0x7d,0x6b,0x60,0x38,
0x7d,0x6a,0x5a,0x14,
0x55,0x6a,0xc2,0x3e,
0x55,0x6b,0x2,0x3e,
0x55,0x4a,0x6,0x1e,
0x55,0x6b,0x6,0x1e,
0x7d,0x6a,0x5a,0x14,
0x55,0x6a,0x84,0x3e,
0x55,0x6b,0x4,0x3e,
0x7c,0x6a,0x5a,0x14,
0x4e,0x80,0x0,0x20>>;

using match_return_zero = ppcbuiltin_matcher_t<PPCBuiltin::return_zero, 
    scanbytes<
0x38,0x60,0x0,0x0,
0x4e,0x80,0x0,0x20>>;

using get_thread_id_func_maybe = scanbytes<
0x81,0x6d,0x1,0x0,
0x80,0x6b,0x1,0x4c,
0x4e,0x80,0x0,0x20
>;

using match_d3d_blocker_check = ppcbuiltin_matcher_t<PPCBuiltin::d3d_blocker_check,
    scanbytes<
0x7d,0x88,0x2,0xa6
>,
blmatch<match_savegplr29>,
scanbytes<
0x94,0x21,0xff,0x80,
0x7c,0x7f,0x1b,0x78,
0x39,0x60,0x0,0x4,
0x83,0xbf,0x0,0x0,
0x91,0x61,0x0,0x50,
0x7f,0xff,0xfb,0x78,
0x7f,0xff,0xfb,0x78,
0x7f,0xff,0xfb,0x78,
0x7f,0xff,0xfb,0x78,
0x7f,0xff,0xfb,0x78,
0x7f,0xff,0xfb,0x78,
0x7f,0xff,0xfb,0x78,
0x7f,0xff,0xfb,0x78,
0x81,0x61,0x0,0x50,
0x39,0x6b,0xff,0xff,
0x91,0x61,0x0,0x50,
0x81,0x61,0x0,0x50,
0x2b,0xb,0x0,0x0,
0x40,0x9a,0xff,0xcc,
0x89,0x7d,0x2a,0xbd,
0x55,0x6b,0x7,0xbd,
0x40,0x82,0x0,0x6c,
0x81,0x2d,0x1,0x0,
0x81,0x7d,0x2a,0x90,
0x81,0x5f,0x0,0x8,
0x83,0xc9,0x0,0x58,
0x81,0x2b,0x0,0x0,
0x7f,0xa,0x48,0x40,
0x41,0x9a,0x0,0x10,
0x81,0x6b,0x0,0x0,
0x93,0xdf,0x0,0xc,
0x91,0x7f,0x0,0x8
>,
blmatch<get_thread_id_func_maybe>,
scanbytes<
0x81,0x7d,0x2a,0x88,
0x7f,0xb,0x18,0x40,
0x40,0x9a,0x0,0x14,
0x81,0x7d,0x2a,0xf4,
0x2f,0xb,0x0,0x0,
0x41,0x9a,0x0,0x8,
0x93,0xdf,0x0,0xc,
0x81,0x7f,0x0,0xc,
0x7d,0x6b,0xf0,0x50,
0x2b,0xb,0x13,0x88,
0x40,0x98,0x0,0xc,
0x38,0x60,0x0,0x1,
0x48,0x0,0x0,0x10,
0x7f,0xa3,0xeb,0x78
>,
skipbytes<4>,
//blmatch<sub_825AC100>,
scanbytes<
0x38,0x60,0x0,0x0,
0x38,0x21,0x0,0x80
>,
bmatch<match_restgplr29>>;

//rdr 82C1F710
using match_d3d_blocker_check_variant2 = ppcbuiltin_matcher_t<PPCBuiltin::d3d_blocker_check,scanbytes<
0x7d,0x88,0x2,0xa6
>,
blmatch<match_savegplr29>,
scanbytes<
0x94,0x21,0xff,0x90,
0x83,0xa3,0x0,0x0,
0x7c,0x7f,0x1b,0x78,
0x7c,0x21,0xb,0x78,
0x39,0x60,0x0,0x4,
0x7d,0x69,0x3,0xa6,
0x7f,0xff,0xfb,0x78,
0x7f,0xff,0xfb,0x78,
0x7f,0xff,0xfb,0x78,
0x7f,0xff,0xfb,0x78,
0x7f,0xff,0xfb,0x78,
0x7f,0xff,0xfb,0x78,
0x7f,0xff,0xfb,0x78,
0x7f,0xff,0xfb,0x78,
0x42,0x0,0xff,0xe0,
0x7c,0x42,0x13,0x78,
0x89,0x7d,0x2a,0xbd,
0x55,0x6b,0x7,0xbd,
0x40,0x82,0x0,0x7c,
0x81,0x7d,0x2a,0x90,
0x81,0x4d,0x1,0x0,
0x81,0x3f,0x0,0x8,
0x81,0xb,0x0,0x0,
0x83,0xca,0x0,0x58,
0x7f,0x9,0x40,0x40,
0x41,0x9a,0x0,0x10,
0x81,0x6b,0x0,0x0,
0x93,0xdf,0x0,0xc,
0x91,0x7f,0x0,0x8
>,
blmatch<get_thread_id_func_maybe>,
scanbytes<
0x81,0x7d,0x2a,0x88,
0x7f,0xb,0x18,0x40,
0x40,0x9a,0x0,0x14,
0x81,0x7d,0x2b,0x0,
0x2f,0xb,0x0,0x0,
0x41,0x9a,0x0,0x8,
0x93,0xdf,0x0,0xc,
0x81,0x7f,0x0,0xc,
0x7d,0x6b,0xf0,0x50,
0x2b,0xb,0x13,0x88,
0x40,0x98,0x0,0xc,
0x38,0x60,0x0,0x1,
0x48,0x0,0x0,0x20,
0x7f,0xa3,0xeb,0x78
>,
skipbytes<4>,
scanbytes<
0x2c,0x3,0x0,0x0,
0x40,0x82,0x0,0xc,
0x93,0xdf,0x0,0xc,
0x4b,0xff,0xff,0xe4,
0x38,0x60,0x0,0x0,
0x38,0x21,0x0,0x70
>,
bmatch<match_restgplr29>>;

using match_red_dead_redemption_switch_func_823C59F8 = ppcbuiltin_matcher_t<PPCBuiltin::red_dead_redemption_switch_func_823C59F8,
    scanbytes<
0x2b,0x4,0x0,0xb,
0x4d,0x99,0x0,0x20,
0x3d,0x80,0x82,0x3c,
0x54,0x80,0x10,0x3a,
0x39,0x8c,0x5a,0x18,
0x7c,0xc,0x0,0x2e,
0x7c,0x9,0x3,0xa6,
0x4e,0x80,0x4,0x20
>,
skipbytes<0x30>,
scanbytes<  0x81, 0x63, 0x00, 0x00, 0x50, 0xAB, 0xE8, 0x04, 0x91, 0x63, 
  0x00, 0x00, 0x4E, 0x80, 0x00, 0x20, 0x81, 0x63, 0x00, 0x00, 
  0x50, 0xAB, 0xD0, 0xCA, 0x91, 0x63, 0x00, 0x00, 0x4E, 0x80, 
  0x00, 0x20, 0x81, 0x63, 0x00, 0x00, 0x50, 0xAB, 0xB9, 0x90, 
  0x91, 0x63, 0x00, 0x00, 0x4E, 0x80, 0x00, 0x20, 0x90, 0xA3, 
  0x00, 0x04, 0x4E, 0x80, 0x00, 0x20, 0x81, 0x63, 0x00, 0x00, 
  0x50, 0xAB, 0xA2, 0x56, 0x91, 0x63, 0x00, 0x00, 0x4E, 0x80, 
  0x00, 0x20, 0x81, 0x63, 0x00, 0x00, 0x50, 0xAB, 0x8B, 0x1C, 
  0x91, 0x63, 0x00, 0x00, 0x4E, 0x80, 0x00, 0x20, 0x81, 0x63, 
  0x00, 0x00, 0x50, 0xAB, 0x73, 0xE2, 0x91, 0x63, 0x00, 0x00, 
  0x4E, 0x80, 0x00, 0x20, 0x90, 0xA3, 0x00, 0x08, 0x4E, 0x80, 
  0x00, 0x20, 0x81, 0x63, 0x00, 0x00, 0x50, 0xAB, 0x54, 0xAA, 
  0x91, 0x63, 0x00, 0x00, 0x4E, 0x80, 0x00, 0x20, 0x81, 0x63, 
  0x00, 0x00, 0x39, 0x45, 0xFF, 0xFF, 0x51, 0x4B, 0x16, 0xBA, 
  0x91, 0x63, 0x00, 0x00, 0x4E, 0x80, 0x00, 0x20, 0x81, 0x63, 
  0x00, 0x00, 0x50, 0xAB, 0x07, 0xBE, 0x91, 0x63, 0x00, 0x00, 
  0x4E, 0x80, 0x00, 0x20, 0x81, 0x63, 0x00, 0x00, 0x50, 0xAB, 
  0x35, 0xB2, 0x91, 0x63, 0x00, 0x00, 0x4E, 0x80, 0x00, 0x20>>;
using builtins_table = builtin_selector_t<
    match_savegplr, match_savegplr15, match_savegplr16, match_savegplr17,
    match_savegplr18, match_savegplr19, match_savegplr20, match_savegplr21,
    match_savegplr22, match_savegplr23, match_savegplr24, match_savegplr25,
    match_savegplr26, match_savegplr27, match_savegplr28, match_savegplr29,
    match_savegplr30, match_savegplr31,
    match_restgplr, match_restgplr15, match_restgplr16, match_restgplr17,
    match_restgplr18, match_restgplr19, match_restgplr20, match_restgplr21,
    match_restgplr22, match_restgplr23, match_restgplr24, match_restgplr25,
    match_restgplr26, match_restgplr27, match_restgplr28, match_restgplr29,
    match_restgplr30, match_restgplr31, match_checkstack_variant1,
    match_d3d_memcpy,
#if 0
     match_block_based_memcpy,
#endif
    match_memset_variant1, match_memcpy_variant1,

    match_memmove_standard_variant1, match_xbox_optimized_memset_variant1,
    memcpy_cached_dest_d3d,



    match_3d_normalize_bungie_variant1,

    match_strncmp_variant1, match_data_iter_func1,
    match_bungie_data_iter_func1_reach, match_bungie_data_iter_increment,
    match_bungie_data_iter_increment_reach, match_blrfunc,
    match_allocator_subfn, match_wcslen_variant1, match_strcmpi_variant1,
    match_strchr, match_d3d_device_set_vert_shader_constant_fn,
    match_d3d_device_set_vert_shader_constant_fn_variant2,

    match_set_exp_variant1, match_set_exp_variant2, match_u64tod,

    match_floorf_variant1, match_ceilf_variant1, match_get_exp_variant1,
    match_get_exp_variant2, match_d3d_device_set_pix_shader_constant_fn,

    match_flush_cached_mem_d3dlib_variant2, match_rdr_hashcode_func,
    match_red_dead_tinyfunc_calledbillions,
    match_red_dead_redemption_tinyfunc_823DA208,
    match_red_dead_redemption_tinyfunc_823DA2F8,
    match_red_dead_redemption_tinyfunc_823DA328,
    match_red_dead_redemption_tinyfunc_823da230,
    match_red_dead_redemption_tinyfunc_823da290,

    match_red_dead_redemption_tinyfunc_823da258,
    match_red_dead_redemption_sub_82EB1110,
    match_red_dead_redemption_sub_82A565E8,
    match_red_dead_redemption_switch_func_823C59F8,
    match_yet_another_vector_memset,
    match_flush_cached_mem_d3dlib,
    match_red_dead_redemption_freqcall_824EAF38,
    match_red_dead_redemption_freqcall_824EB0C8,
    match_popcount_uint32_h3,
    match_return_zero,
    match_d3d_blocker_check,
    match_d3d_blocker_check_variant2

    >;

// static constexpr global_builtins builtin_table{};

PPCBuiltin xe::cpu::ppc::classify_function_at(uint8_t* fn, uint8_t* module_base,
                                              Module* rm) {
  /*for (auto&& builtin : builtin_table.the_table) {
    if (!memcmp(fn, (const void*)builtin->data, builtin->length)) {
      return builtin->builtin;
    }
  }

  return PPCBuiltin::None;*/
  return builtins_table::select(fn, module_base, (XexModule*)rm);
}